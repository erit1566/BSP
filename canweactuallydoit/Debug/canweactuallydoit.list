
canweactuallydoit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000379c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003930  08003930  00013930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003968  08003968  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003968  08003968  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003968  08003968  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003968  08003968  00013968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800396c  0800396c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  0800397c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  0800397c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e51a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001be4  00000000  00000000  0002e556  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000790  00000000  00000000  00030140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006d8  00000000  00000000  000308d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ce63  00000000  00000000  00030fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007dee  00000000  00000000  0004de0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a53e0  00000000  00000000  00055bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fafd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e1c  00000000  00000000  000fb054  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003918 	.word	0x08003918

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003918 	.word	0x08003918

080001d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_Init+0x28>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_Init+0x28>)
 80001de:	f043 0310 	orr.w	r3, r3, #16
 80001e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e4:	2003      	movs	r0, #3
 80001e6:	f000 ff5f 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 f808 	bl	8000200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f0:	f003 f9f6 	bl	80035e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f4:	2300      	movs	r3, #0
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40022000 	.word	0x40022000

08000200 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000208:	4b12      	ldr	r3, [pc, #72]	; (8000254 <HAL_InitTick+0x54>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <HAL_InitTick+0x58>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000216:	fbb3 f3f1 	udiv	r3, r3, r1
 800021a:	fbb2 f3f3 	udiv	r3, r2, r3
 800021e:	4618      	mov	r0, r3
 8000220:	f000 ff77 	bl	8001112 <HAL_SYSTICK_Config>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800022a:	2301      	movs	r3, #1
 800022c:	e00e      	b.n	800024c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d80a      	bhi.n	800024a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000234:	2200      	movs	r2, #0
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	f04f 30ff 	mov.w	r0, #4294967295
 800023c:	f000 ff3f 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000240:	4a06      	ldr	r2, [pc, #24]	; (800025c <HAL_InitTick+0x5c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000246:	2300      	movs	r3, #0
 8000248:	e000      	b.n	800024c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800024a:	2301      	movs	r3, #1
}
 800024c:	4618      	mov	r0, r3
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000008 	.word	0x20000008
 8000258:	20000004 	.word	0x20000004
 800025c:	20000000 	.word	0x20000000

08000260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <HAL_IncTick+0x20>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	461a      	mov	r2, r3
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_IncTick+0x24>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4413      	add	r3, r2
 8000270:	4a04      	ldr	r2, [pc, #16]	; (8000284 <HAL_IncTick+0x24>)
 8000272:	6013      	str	r3, [r2, #0]
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	20000004 	.word	0x20000004
 8000284:	20000028 	.word	0x20000028

08000288 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  return uwTick;  
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <HAL_GetTick+0x14>)
 800028e:	681b      	ldr	r3, [r3, #0]
}
 8000290:	4618      	mov	r0, r3
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000028 	.word	0x20000028

080002a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002a8:	f7ff ffee 	bl	8000288 <HAL_GetTick>
 80002ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002b8:	d005      	beq.n	80002c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <HAL_Delay+0x40>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	461a      	mov	r2, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	4413      	add	r3, r2
 80002c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002c6:	bf00      	nop
 80002c8:	f7ff ffde 	bl	8000288 <HAL_GetTick>
 80002cc:	4602      	mov	r2, r0
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	1ad3      	subs	r3, r2, r3
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d8f7      	bhi.n	80002c8 <HAL_Delay+0x28>
  {
  }
}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000004 	.word	0x20000004

080002e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d101      	bne.n	80002f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80002f2:	2301      	movs	r3, #1
 80002f4:	e0ed      	b.n	80004d2 <HAL_CAN_Init+0x1ee>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d102      	bne.n	8000308 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f003 f990 	bl	8003628 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f022 0202 	bic.w	r2, r2, #2
 8000316:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000318:	f7ff ffb6 	bl	8000288 <HAL_GetTick>
 800031c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800031e:	e012      	b.n	8000346 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000320:	f7ff ffb2 	bl	8000288 <HAL_GetTick>
 8000324:	4602      	mov	r2, r0
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	1ad3      	subs	r3, r2, r3
 800032a:	2b0a      	cmp	r3, #10
 800032c:	d90b      	bls.n	8000346 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000332:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2205      	movs	r2, #5
 800033e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000342:	2301      	movs	r3, #1
 8000344:	e0c5      	b.n	80004d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	f003 0302 	and.w	r3, r3, #2
 8000350:	2b00      	cmp	r3, #0
 8000352:	d1e5      	bne.n	8000320 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f042 0201 	orr.w	r2, r2, #1
 8000362:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000364:	f7ff ff90 	bl	8000288 <HAL_GetTick>
 8000368:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800036a:	e012      	b.n	8000392 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800036c:	f7ff ff8c 	bl	8000288 <HAL_GetTick>
 8000370:	4602      	mov	r2, r0
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	2b0a      	cmp	r3, #10
 8000378:	d90b      	bls.n	8000392 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800037e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2205      	movs	r2, #5
 800038a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800038e:	2301      	movs	r3, #1
 8000390:	e09f      	b.n	80004d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0e5      	beq.n	800036c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	7e1b      	ldrb	r3, [r3, #24]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d108      	bne.n	80003ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	e007      	b.n	80003ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80003c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	7e5b      	ldrb	r3, [r3, #25]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d108      	bne.n	80003e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	e007      	b.n	80003f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80003f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	7e9b      	ldrb	r3, [r3, #26]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d108      	bne.n	800040e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f042 0220 	orr.w	r2, r2, #32
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	e007      	b.n	800041e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f022 0220 	bic.w	r2, r2, #32
 800041c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	7edb      	ldrb	r3, [r3, #27]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d108      	bne.n	8000438 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f022 0210 	bic.w	r2, r2, #16
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	e007      	b.n	8000448 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f042 0210 	orr.w	r2, r2, #16
 8000446:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	7f1b      	ldrb	r3, [r3, #28]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d108      	bne.n	8000462 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f042 0208 	orr.w	r2, r2, #8
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	e007      	b.n	8000472 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f022 0208 	bic.w	r2, r2, #8
 8000470:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	7f5b      	ldrb	r3, [r3, #29]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d108      	bne.n	800048c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f042 0204 	orr.w	r2, r2, #4
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	e007      	b.n	800049c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f022 0204 	bic.w	r2, r2, #4
 800049a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	689a      	ldr	r2, [r3, #8]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	431a      	orrs	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	691b      	ldr	r3, [r3, #16]
 80004aa:	431a      	orrs	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	ea42 0103 	orr.w	r1, r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	1e5a      	subs	r2, r3, #1
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	430a      	orrs	r2, r1
 80004c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2200      	movs	r2, #0
 80004c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2201      	movs	r2, #1
 80004cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3710      	adds	r7, #16
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80004da:	b480      	push	{r7}
 80004dc:	b087      	sub	sp, #28
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
 80004e2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004f0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80004f2:	7cfb      	ldrb	r3, [r7, #19]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d003      	beq.n	8000500 <HAL_CAN_ConfigFilter+0x26>
 80004f8:	7cfb      	ldrb	r3, [r7, #19]
 80004fa:	2b02      	cmp	r3, #2
 80004fc:	f040 80aa 	bne.w	8000654 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000506:	f043 0201 	orr.w	r2, r3, #1
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	f003 031f 	and.w	r3, r3, #31
 8000518:	2201      	movs	r2, #1
 800051a:	fa02 f303 	lsl.w	r3, r2, r3
 800051e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	43db      	mvns	r3, r3
 800052a:	401a      	ands	r2, r3
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d123      	bne.n	8000582 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	43db      	mvns	r3, r3
 8000544:	401a      	ands	r2, r3
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800055c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	3248      	adds	r2, #72	; 0x48
 8000562:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000576:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000578:	6979      	ldr	r1, [r7, #20]
 800057a:	3348      	adds	r3, #72	; 0x48
 800057c:	00db      	lsls	r3, r3, #3
 800057e:	440b      	add	r3, r1
 8000580:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d122      	bne.n	80005d0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	431a      	orrs	r2, r3
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80005aa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	3248      	adds	r2, #72	; 0x48
 80005b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80005c6:	6979      	ldr	r1, [r7, #20]
 80005c8:	3348      	adds	r3, #72	; 0x48
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	440b      	add	r3, r1
 80005ce:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d109      	bne.n	80005ec <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	43db      	mvns	r3, r3
 80005e2:	401a      	ands	r2, r3
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80005ea:	e007      	b.n	80005fc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	431a      	orrs	r2, r3
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	691b      	ldr	r3, [r3, #16]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d109      	bne.n	8000618 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	43db      	mvns	r3, r3
 800060e:	401a      	ands	r2, r3
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000616:	e007      	b.n	8000628 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	431a      	orrs	r2, r3
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	6a1b      	ldr	r3, [r3, #32]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d107      	bne.n	8000640 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	431a      	orrs	r2, r3
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000646:	f023 0201 	bic.w	r2, r3, #1
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000650:	2300      	movs	r3, #0
 8000652:	e006      	b.n	8000662 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000658:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000660:	2301      	movs	r3, #1
  }
}
 8000662:	4618      	mov	r0, r3
 8000664:	371c      	adds	r7, #28
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b084      	sub	sp, #16
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b01      	cmp	r3, #1
 8000680:	d12e      	bne.n	80006e0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2202      	movs	r2, #2
 8000686:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f022 0201 	bic.w	r2, r2, #1
 8000698:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800069a:	f7ff fdf5 	bl	8000288 <HAL_GetTick>
 800069e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80006a0:	e012      	b.n	80006c8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006a2:	f7ff fdf1 	bl	8000288 <HAL_GetTick>
 80006a6:	4602      	mov	r2, r0
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	2b0a      	cmp	r3, #10
 80006ae:	d90b      	bls.n	80006c8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2205      	movs	r2, #5
 80006c0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80006c4:	2301      	movs	r3, #1
 80006c6:	e012      	b.n	80006ee <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1e5      	bne.n	80006a2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80006dc:	2300      	movs	r3, #0
 80006de:	e006      	b.n	80006ee <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80006ec:	2301      	movs	r3, #1
  }
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b089      	sub	sp, #36	; 0x24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f893 3020 	ldrb.w	r3, [r3, #32]
 800070a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000714:	7ffb      	ldrb	r3, [r7, #31]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d003      	beq.n	8000722 <HAL_CAN_AddTxMessage+0x2c>
 800071a:	7ffb      	ldrb	r3, [r7, #31]
 800071c:	2b02      	cmp	r3, #2
 800071e:	f040 80b8 	bne.w	8000892 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000728:	2b00      	cmp	r3, #0
 800072a:	d10a      	bne.n	8000742 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000732:	2b00      	cmp	r3, #0
 8000734:	d105      	bne.n	8000742 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800073c:	2b00      	cmp	r3, #0
 800073e:	f000 80a0 	beq.w	8000882 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	0e1b      	lsrs	r3, r3, #24
 8000746:	f003 0303 	and.w	r3, r3, #3
 800074a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	2b02      	cmp	r3, #2
 8000750:	d907      	bls.n	8000762 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	e09e      	b.n	80008a0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000762:	2201      	movs	r2, #1
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d10d      	bne.n	8000790 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800077e:	68f9      	ldr	r1, [r7, #12]
 8000780:	6809      	ldr	r1, [r1, #0]
 8000782:	431a      	orrs	r2, r3
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	3318      	adds	r3, #24
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	440b      	add	r3, r1
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	e00f      	b.n	80007b0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800079a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80007a0:	68f9      	ldr	r1, [r7, #12]
 80007a2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80007a4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	3318      	adds	r3, #24
 80007aa:	011b      	lsls	r3, r3, #4
 80007ac:	440b      	add	r3, r1
 80007ae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	6819      	ldr	r1, [r3, #0]
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	691a      	ldr	r2, [r3, #16]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	3318      	adds	r3, #24
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	440b      	add	r3, r1
 80007c0:	3304      	adds	r3, #4
 80007c2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	7d1b      	ldrb	r3, [r3, #20]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d111      	bne.n	80007f0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	3318      	adds	r3, #24
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	4413      	add	r3, r2
 80007d8:	3304      	adds	r3, #4
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	6811      	ldr	r1, [r2, #0]
 80007e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	3318      	adds	r3, #24
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	440b      	add	r3, r1
 80007ec:	3304      	adds	r3, #4
 80007ee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3307      	adds	r3, #7
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	061a      	lsls	r2, r3, #24
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3306      	adds	r3, #6
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	041b      	lsls	r3, r3, #16
 8000800:	431a      	orrs	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3305      	adds	r3, #5
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	021b      	lsls	r3, r3, #8
 800080a:	4313      	orrs	r3, r2
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	3204      	adds	r2, #4
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	4610      	mov	r0, r2
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	6811      	ldr	r1, [r2, #0]
 8000818:	ea43 0200 	orr.w	r2, r3, r0
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	440b      	add	r3, r1
 8000822:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000826:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3303      	adds	r3, #3
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	061a      	lsls	r2, r3, #24
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3302      	adds	r3, #2
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	041b      	lsls	r3, r3, #16
 8000838:	431a      	orrs	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3301      	adds	r3, #1
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	4313      	orrs	r3, r2
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	7812      	ldrb	r2, [r2, #0]
 8000848:	4610      	mov	r0, r2
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	6811      	ldr	r1, [r2, #0]
 800084e:	ea43 0200 	orr.w	r2, r3, r0
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	440b      	add	r3, r1
 8000858:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800085c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3318      	adds	r3, #24
 8000866:	011b      	lsls	r3, r3, #4
 8000868:	4413      	add	r3, r2
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	68fa      	ldr	r2, [r7, #12]
 800086e:	6811      	ldr	r1, [r2, #0]
 8000870:	f043 0201 	orr.w	r2, r3, #1
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	3318      	adds	r3, #24
 8000878:	011b      	lsls	r3, r3, #4
 800087a:	440b      	add	r3, r1
 800087c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800087e:	2300      	movs	r3, #0
 8000880:	e00e      	b.n	80008a0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000886:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e006      	b.n	80008a0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000896:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
  }
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3724      	adds	r7, #36	; 0x24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80008ac:	b480      	push	{r7}
 80008ae:	b087      	sub	sp, #28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
 80008b8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008c0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d003      	beq.n	80008d0 <HAL_CAN_GetRxMessage+0x24>
 80008c8:	7dfb      	ldrb	r3, [r7, #23]
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	f040 80f4 	bne.w	8000ab8 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10e      	bne.n	80008f4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	f003 0303 	and.w	r3, r3, #3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d116      	bne.n	8000912 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	e0e8      	b.n	8000ac6 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	691b      	ldr	r3, [r3, #16]
 80008fa:	f003 0303 	and.w	r3, r3, #3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d107      	bne.n	8000912 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000906:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e0d9      	b.n	8000ac6 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	331b      	adds	r3, #27
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4413      	add	r3, r2
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f003 0204 	and.w	r2, r3, #4
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d10c      	bne.n	800094a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	331b      	adds	r3, #27
 8000938:	011b      	lsls	r3, r3, #4
 800093a:	4413      	add	r3, r2
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	0d5b      	lsrs	r3, r3, #21
 8000940:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	e00b      	b.n	8000962 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	331b      	adds	r3, #27
 8000952:	011b      	lsls	r3, r3, #4
 8000954:	4413      	add	r3, r2
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	08db      	lsrs	r3, r3, #3
 800095a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	331b      	adds	r3, #27
 800096a:	011b      	lsls	r3, r3, #4
 800096c:	4413      	add	r3, r2
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	f003 0201 	and.w	r2, r3, #1
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	331b      	adds	r3, #27
 8000982:	011b      	lsls	r3, r3, #4
 8000984:	4413      	add	r3, r2
 8000986:	3304      	adds	r3, #4
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f003 020f 	and.w	r2, r3, #15
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	331b      	adds	r3, #27
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	4413      	add	r3, r2
 800099e:	3304      	adds	r3, #4
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	0a1b      	lsrs	r3, r3, #8
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	331b      	adds	r3, #27
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	4413      	add	r3, r2
 80009b6:	3304      	adds	r3, #4
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	0c1b      	lsrs	r3, r3, #16
 80009bc:	b29a      	uxth	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	011b      	lsls	r3, r3, #4
 80009ca:	4413      	add	r3, r2
 80009cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	011b      	lsls	r3, r3, #4
 80009e0:	4413      	add	r3, r2
 80009e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	0a1a      	lsrs	r2, r3, #8
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	011b      	lsls	r3, r3, #4
 80009fa:	4413      	add	r3, r2
 80009fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	0c1a      	lsrs	r2, r3, #16
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	3302      	adds	r3, #2
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	011b      	lsls	r3, r3, #4
 8000a14:	4413      	add	r3, r2
 8000a16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	0e1a      	lsrs	r2, r3, #24
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	3303      	adds	r3, #3
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	011b      	lsls	r3, r3, #4
 8000a2e:	4413      	add	r3, r2
 8000a30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	011b      	lsls	r3, r3, #4
 8000a46:	4413      	add	r3, r2
 8000a48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	0a1a      	lsrs	r2, r3, #8
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	3305      	adds	r3, #5
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	4413      	add	r3, r2
 8000a62:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	0c1a      	lsrs	r2, r3, #16
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	3306      	adds	r3, #6
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	011b      	lsls	r3, r3, #4
 8000a7a:	4413      	add	r3, r2
 8000a7c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	0e1a      	lsrs	r2, r3, #24
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	3307      	adds	r3, #7
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d108      	bne.n	8000aa4 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f042 0220 	orr.w	r2, r2, #32
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	e007      	b.n	8000ab4 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	691a      	ldr	r2, [r3, #16]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f042 0220 	orr.w	r2, r2, #32
 8000ab2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	e006      	b.n	8000ac6 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000abc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
  }
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	371c      	adds	r7, #28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b08a      	sub	sp, #40	; 0x28
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000b0e:	6a3b      	ldr	r3, [r7, #32]
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d07c      	beq.n	8000c12 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d023      	beq.n	8000b6a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2201      	movs	r2, #1
 8000b28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f002 fd25 	bl	8003584 <HAL_CAN_TxMailbox0CompleteCallback>
 8000b3a:	e016      	b.n	8000b6a <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d004      	beq.n	8000b50 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b4e:	e00c      	b.n	8000b6a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	f003 0308 	and.w	r3, r3, #8
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d004      	beq.n	8000b64 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
 8000b62:	e002      	b.n	8000b6a <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f000 f979 	bl	8000e5c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d024      	beq.n	8000bbe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f000 f953 	bl	8000e34 <HAL_CAN_TxMailbox1CompleteCallback>
 8000b8e:	e016      	b.n	8000bbe <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d004      	beq.n	8000ba4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ba2:	e00c      	b.n	8000bbe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d004      	beq.n	8000bb8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb6:	e002      	b.n	8000bbe <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 f959 	bl	8000e70 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d024      	beq.n	8000c12 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 f933 	bl	8000e48 <HAL_CAN_TxMailbox2CompleteCallback>
 8000be2:	e016      	b.n	8000c12 <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d004      	beq.n	8000bf8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8000bf6:	e00c      	b.n	8000c12 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d004      	beq.n	8000c0c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
 8000c0a:	e002      	b.n	8000c12 <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f000 f939 	bl	8000e84 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000c12:	6a3b      	ldr	r3, [r7, #32]
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d00c      	beq.n	8000c36 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	f003 0310 	and.w	r3, r3, #16
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d007      	beq.n	8000c36 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2210      	movs	r2, #16
 8000c34:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d00b      	beq.n	8000c58 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	f003 0308 	and.w	r3, r3, #8
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d006      	beq.n	8000c58 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2208      	movs	r2, #8
 8000c50:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 f920 	bl	8000e98 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000c58:	6a3b      	ldr	r3, [r7, #32]
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d009      	beq.n	8000c76 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f002 fc95 	bl	80035a0 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000c76:	6a3b      	ldr	r3, [r7, #32]
 8000c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d00c      	beq.n	8000c9a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d007      	beq.n	8000c9a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2210      	movs	r2, #16
 8000c98:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	f003 0320 	and.w	r3, r3, #32
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d00b      	beq.n	8000cbc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d006      	beq.n	8000cbc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2208      	movs	r2, #8
 8000cb4:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f000 f902 	bl	8000ec0 <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	f003 0310 	and.w	r3, r3, #16
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d009      	beq.n	8000cda <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	691b      	ldr	r3, [r3, #16]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f000 f8e9 	bl	8000eac <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00b      	beq.n	8000cfc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d006      	beq.n	8000cfc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2210      	movs	r2, #16
 8000cf4:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f000 f8ec 	bl	8000ed4 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00b      	beq.n	8000d1e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d006      	beq.n	8000d1e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2208      	movs	r2, #8
 8000d16:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f000 f8e5 	bl	8000ee8 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000d1e:	6a3b      	ldr	r3, [r7, #32]
 8000d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d075      	beq.n	8000e14 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d06c      	beq.n	8000e0c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000d32:	6a3b      	ldr	r3, [r7, #32]
 8000d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d008      	beq.n	8000d4e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d4e:	6a3b      	ldr	r3, [r7, #32]
 8000d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d008      	beq.n	8000d6a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d008      	beq.n	8000d86 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d86:	6a3b      	ldr	r3, [r7, #32]
 8000d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d03d      	beq.n	8000e0c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d038      	beq.n	8000e0c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000da0:	2b30      	cmp	r3, #48	; 0x30
 8000da2:	d017      	beq.n	8000dd4 <HAL_CAN_IRQHandler+0x302>
 8000da4:	2b30      	cmp	r3, #48	; 0x30
 8000da6:	d804      	bhi.n	8000db2 <HAL_CAN_IRQHandler+0x2e0>
 8000da8:	2b10      	cmp	r3, #16
 8000daa:	d009      	beq.n	8000dc0 <HAL_CAN_IRQHandler+0x2ee>
 8000dac:	2b20      	cmp	r3, #32
 8000dae:	d00c      	beq.n	8000dca <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000db0:	e024      	b.n	8000dfc <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000db2:	2b50      	cmp	r3, #80	; 0x50
 8000db4:	d018      	beq.n	8000de8 <HAL_CAN_IRQHandler+0x316>
 8000db6:	2b60      	cmp	r3, #96	; 0x60
 8000db8:	d01b      	beq.n	8000df2 <HAL_CAN_IRQHandler+0x320>
 8000dba:	2b40      	cmp	r3, #64	; 0x40
 8000dbc:	d00f      	beq.n	8000dde <HAL_CAN_IRQHandler+0x30c>
            break;
 8000dbe:	e01d      	b.n	8000dfc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	f043 0308 	orr.w	r3, r3, #8
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dc8:	e018      	b.n	8000dfc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	f043 0310 	orr.w	r3, r3, #16
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dd2:	e013      	b.n	8000dfc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	f043 0320 	orr.w	r3, r3, #32
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ddc:	e00e      	b.n	8000dfc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000de6:	e009      	b.n	8000dfc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000df0:	e004      	b.n	8000dfc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dfa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	699a      	ldr	r2, [r3, #24]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e0a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2204      	movs	r2, #4
 8000e12:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d008      	beq.n	8000e2c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	431a      	orrs	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 f868 	bl	8000efc <HAL_CAN_ErrorCallback>
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <NVIC_EnableIRQ+0x30>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	da0b      	bge.n	8000fd4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <NVIC_SetPriority+0x4c>)
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 030f 	and.w	r3, r3, #15
 8000fc8:	3b04      	subs	r3, #4
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd2:	e009      	b.n	8000fe8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4907      	ldr	r1, [pc, #28]	; (8000ff8 <NVIC_SetPriority+0x50>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff2d 	bl	8000f10 <NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff42 	bl	8000f58 <NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff8e 	bl	8000ffc <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5d 	bl	8000fa8 <NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff35 	bl	8000f74 <NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa2 	bl	8001064 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001142:	e160      	b.n	8001406 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	2101      	movs	r1, #1
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	fa01 f303 	lsl.w	r3, r1, r3
 8001150:	4013      	ands	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 8152 	beq.w	8001400 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x40>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b12      	cmp	r3, #18
 800116a:	d123      	bne.n	80011b4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	08da      	lsrs	r2, r3, #3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3208      	adds	r2, #8
 8001174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	08da      	lsrs	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3208      	adds	r2, #8
 80011ae:	6939      	ldr	r1, [r7, #16]
 80011b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0203 	and.w	r2, r3, #3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d00b      	beq.n	8001208 <HAL_GPIO_Init+0xdc>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d007      	beq.n	8001208 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011fc:	2b11      	cmp	r3, #17
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b12      	cmp	r3, #18
 8001206:	d130      	bne.n	800126a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800123e:	2201      	movs	r2, #1
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	091b      	lsrs	r3, r3, #4
 8001254:	f003 0201 	and.w	r2, r3, #1
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 80ac 	beq.w	8001400 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a8:	4b5e      	ldr	r3, [pc, #376]	; (8001424 <HAL_GPIO_Init+0x2f8>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a5d      	ldr	r2, [pc, #372]	; (8001424 <HAL_GPIO_Init+0x2f8>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b5b      	ldr	r3, [pc, #364]	; (8001424 <HAL_GPIO_Init+0x2f8>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80012c0:	4a59      	ldr	r2, [pc, #356]	; (8001428 <HAL_GPIO_Init+0x2fc>)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	220f      	movs	r2, #15
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012ea:	d025      	beq.n	8001338 <HAL_GPIO_Init+0x20c>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a4f      	ldr	r2, [pc, #316]	; (800142c <HAL_GPIO_Init+0x300>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d01f      	beq.n	8001334 <HAL_GPIO_Init+0x208>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a4e      	ldr	r2, [pc, #312]	; (8001430 <HAL_GPIO_Init+0x304>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d019      	beq.n	8001330 <HAL_GPIO_Init+0x204>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a4d      	ldr	r2, [pc, #308]	; (8001434 <HAL_GPIO_Init+0x308>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d013      	beq.n	800132c <HAL_GPIO_Init+0x200>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a4c      	ldr	r2, [pc, #304]	; (8001438 <HAL_GPIO_Init+0x30c>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d00d      	beq.n	8001328 <HAL_GPIO_Init+0x1fc>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a4b      	ldr	r2, [pc, #300]	; (800143c <HAL_GPIO_Init+0x310>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d007      	beq.n	8001324 <HAL_GPIO_Init+0x1f8>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a4a      	ldr	r2, [pc, #296]	; (8001440 <HAL_GPIO_Init+0x314>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d101      	bne.n	8001320 <HAL_GPIO_Init+0x1f4>
 800131c:	2306      	movs	r3, #6
 800131e:	e00c      	b.n	800133a <HAL_GPIO_Init+0x20e>
 8001320:	2307      	movs	r3, #7
 8001322:	e00a      	b.n	800133a <HAL_GPIO_Init+0x20e>
 8001324:	2305      	movs	r3, #5
 8001326:	e008      	b.n	800133a <HAL_GPIO_Init+0x20e>
 8001328:	2304      	movs	r3, #4
 800132a:	e006      	b.n	800133a <HAL_GPIO_Init+0x20e>
 800132c:	2303      	movs	r3, #3
 800132e:	e004      	b.n	800133a <HAL_GPIO_Init+0x20e>
 8001330:	2302      	movs	r3, #2
 8001332:	e002      	b.n	800133a <HAL_GPIO_Init+0x20e>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <HAL_GPIO_Init+0x20e>
 8001338:	2300      	movs	r3, #0
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	f002 0203 	and.w	r2, r2, #3
 8001340:	0092      	lsls	r2, r2, #2
 8001342:	4093      	lsls	r3, r2
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800134a:	4937      	ldr	r1, [pc, #220]	; (8001428 <HAL_GPIO_Init+0x2fc>)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	3302      	adds	r3, #2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001358:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <HAL_GPIO_Init+0x318>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800137c:	4a31      	ldr	r2, [pc, #196]	; (8001444 <HAL_GPIO_Init+0x318>)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001382:	4b30      	ldr	r3, [pc, #192]	; (8001444 <HAL_GPIO_Init+0x318>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013a6:	4a27      	ldr	r2, [pc, #156]	; (8001444 <HAL_GPIO_Init+0x318>)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ac:	4b25      	ldr	r3, [pc, #148]	; (8001444 <HAL_GPIO_Init+0x318>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013d0:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <HAL_GPIO_Init+0x318>)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_GPIO_Init+0x318>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x2ce>
        {
          temp |= iocurrent;
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <HAL_GPIO_Init+0x318>)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	f47f ae97 	bne.w	8001144 <HAL_GPIO_Init+0x18>
  }
}
 8001416:	bf00      	nop
 8001418:	371c      	adds	r7, #28
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000
 800142c:	48000400 	.word	0x48000400
 8001430:	48000800 	.word	0x48000800
 8001434:	48000c00 	.word	0x48000c00
 8001438:	48001000 	.word	0x48001000
 800143c:	48001400 	.word	0x48001400
 8001440:	48001800 	.word	0x48001800
 8001444:	40010400 	.word	0x40010400

08001448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
 8001454:	4613      	mov	r3, r2
 8001456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001458:	787b      	ldrb	r3, [r7, #1]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001464:	e002      	b.n	800146c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695a      	ldr	r2, [r3, #20]
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	405a      	eors	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	615a      	str	r2, [r3, #20]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d102      	bne.n	80014b6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	f000 beda 	b.w	800226a <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 8164 	beq.w	800178e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014c6:	4bb0      	ldr	r3, [pc, #704]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d00c      	beq.n	80014ec <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014d2:	4bad      	ldr	r3, [pc, #692]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d15a      	bne.n	8001594 <HAL_RCC_OscConfig+0xf8>
 80014de:	4baa      	ldr	r3, [pc, #680]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ea:	d153      	bne.n	8001594 <HAL_RCC_OscConfig+0xf8>
 80014ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80014f8:	fa93 f3a3 	rbit	r3, r3
 80014fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001500:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001504:	fab3 f383 	clz	r3, r3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b01      	cmp	r3, #1
 8001516:	d102      	bne.n	800151e <HAL_RCC_OscConfig+0x82>
 8001518:	4b9b      	ldr	r3, [pc, #620]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	e015      	b.n	800154a <HAL_RCC_OscConfig+0xae>
 800151e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001522:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001536:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800153a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800153e:	fa93 f3a3 	rbit	r3, r3
 8001542:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001546:	4b90      	ldr	r3, [pc, #576]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800154e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001552:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001556:	fa92 f2a2 	rbit	r2, r2
 800155a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800155e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001562:	fab2 f282 	clz	r2, r2
 8001566:	b252      	sxtb	r2, r2
 8001568:	f042 0220 	orr.w	r2, r2, #32
 800156c:	b252      	sxtb	r2, r2
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	f002 021f 	and.w	r2, r2, #31
 8001574:	2101      	movs	r1, #1
 8001576:	fa01 f202 	lsl.w	r2, r1, r2
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 8105 	beq.w	800178c <HAL_RCC_OscConfig+0x2f0>
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f040 80ff 	bne.w	800178c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	f000 be6b 	b.w	800226a <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x112>
 80015a0:	4b79      	ldr	r3, [pc, #484]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a78      	ldr	r2, [pc, #480]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 80015a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	e030      	b.n	8001610 <HAL_RCC_OscConfig+0x174>
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10c      	bne.n	80015d2 <HAL_RCC_OscConfig+0x136>
 80015b8:	4b73      	ldr	r3, [pc, #460]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a72      	ldr	r2, [pc, #456]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 80015be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b70      	ldr	r3, [pc, #448]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a6f      	ldr	r2, [pc, #444]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 80015ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	e01e      	b.n	8001610 <HAL_RCC_OscConfig+0x174>
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x15c>
 80015de:	4b6a      	ldr	r3, [pc, #424]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a69      	ldr	r2, [pc, #420]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 80015e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b67      	ldr	r3, [pc, #412]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a66      	ldr	r2, [pc, #408]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e00b      	b.n	8001610 <HAL_RCC_OscConfig+0x174>
 80015f8:	4b63      	ldr	r3, [pc, #396]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a62      	ldr	r2, [pc, #392]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 80015fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b60      	ldr	r3, [pc, #384]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a5f      	ldr	r2, [pc, #380]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 800160a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d05a      	beq.n	80016d0 <HAL_RCC_OscConfig+0x234>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7fe fe35 	bl	8000288 <HAL_GetTick>
 800161e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	e00a      	b.n	800163a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001624:	f7fe fe30 	bl	8000288 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b64      	cmp	r3, #100	; 0x64
 8001632:	d902      	bls.n	800163a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	f000 be18 	b.w	800226a <HAL_RCC_OscConfig+0xdce>
 800163a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800163e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001642:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001646:	fa93 f3a3 	rbit	r3, r3
 800164a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 800164e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	095b      	lsrs	r3, r3, #5
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b01      	cmp	r3, #1
 8001664:	d102      	bne.n	800166c <HAL_RCC_OscConfig+0x1d0>
 8001666:	4b48      	ldr	r3, [pc, #288]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	e015      	b.n	8001698 <HAL_RCC_OscConfig+0x1fc>
 800166c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001670:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001674:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001678:	fa93 f3a3 	rbit	r3, r3
 800167c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001680:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001684:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001688:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800168c:	fa93 f3a3 	rbit	r3, r3
 8001690:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001694:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800169c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80016a0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80016a4:	fa92 f2a2 	rbit	r2, r2
 80016a8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 80016ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80016b0:	fab2 f282 	clz	r2, r2
 80016b4:	b252      	sxtb	r2, r2
 80016b6:	f042 0220 	orr.w	r2, r2, #32
 80016ba:	b252      	sxtb	r2, r2
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	f002 021f 	and.w	r2, r2, #31
 80016c2:	2101      	movs	r1, #1
 80016c4:	fa01 f202 	lsl.w	r2, r1, r2
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0aa      	beq.n	8001624 <HAL_RCC_OscConfig+0x188>
 80016ce:	e05e      	b.n	800178e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7fe fdda 	bl	8000288 <HAL_GetTick>
 80016d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d8:	e00a      	b.n	80016f0 <HAL_RCC_OscConfig+0x254>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016da:	f7fe fdd5 	bl	8000288 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d902      	bls.n	80016f0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	f000 bdbd 	b.w	800226a <HAL_RCC_OscConfig+0xdce>
 80016f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016f4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80016fc:	fa93 f3a3 	rbit	r3, r3
 8001700:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001704:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001708:	fab3 f383 	clz	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b01      	cmp	r3, #1
 800171a:	d102      	bne.n	8001722 <HAL_RCC_OscConfig+0x286>
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	e015      	b.n	800174e <HAL_RCC_OscConfig+0x2b2>
 8001722:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001726:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800172e:	fa93 f3a3 	rbit	r3, r3
 8001732:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001736:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800173a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800173e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_RCC_OscConfig+0x2ec>)
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001752:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001756:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800175a:	fa92 f2a2 	rbit	r2, r2
 800175e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001762:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001766:	fab2 f282 	clz	r2, r2
 800176a:	b252      	sxtb	r2, r2
 800176c:	f042 0220 	orr.w	r2, r2, #32
 8001770:	b252      	sxtb	r2, r2
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	f002 021f 	and.w	r2, r2, #31
 8001778:	2101      	movs	r1, #1
 800177a:	fa01 f202 	lsl.w	r2, r1, r2
 800177e:	4013      	ands	r3, r2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1aa      	bne.n	80016da <HAL_RCC_OscConfig+0x23e>
 8001784:	e003      	b.n	800178e <HAL_RCC_OscConfig+0x2f2>
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 8171 	beq.w	8001a80 <HAL_RCC_OscConfig+0x5e4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800179e:	4bd0      	ldr	r3, [pc, #832]	; (8001ae0 <HAL_RCC_OscConfig+0x644>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00c      	beq.n	80017c4 <HAL_RCC_OscConfig+0x328>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017aa:	4bcd      	ldr	r3, [pc, #820]	; (8001ae0 <HAL_RCC_OscConfig+0x644>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d16e      	bne.n	8001894 <HAL_RCC_OscConfig+0x3f8>
 80017b6:	4bca      	ldr	r3, [pc, #808]	; (8001ae0 <HAL_RCC_OscConfig+0x644>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80017be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017c2:	d167      	bne.n	8001894 <HAL_RCC_OscConfig+0x3f8>
 80017c4:	2302      	movs	r3, #2
 80017c6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 80017d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	095b      	lsrs	r3, r3, #5
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d102      	bne.n	80017f4 <HAL_RCC_OscConfig+0x358>
 80017ee:	4bbc      	ldr	r3, [pc, #752]	; (8001ae0 <HAL_RCC_OscConfig+0x644>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	e013      	b.n	800181c <HAL_RCC_OscConfig+0x380>
 80017f4:	2302      	movs	r3, #2
 80017f6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800180c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001810:	fa93 f3a3 	rbit	r3, r3
 8001814:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001818:	4bb1      	ldr	r3, [pc, #708]	; (8001ae0 <HAL_RCC_OscConfig+0x644>)
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	2202      	movs	r2, #2
 800181e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001822:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001826:	fa92 f2a2 	rbit	r2, r2
 800182a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 800182e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001832:	fab2 f282 	clz	r2, r2
 8001836:	b252      	sxtb	r2, r2
 8001838:	f042 0220 	orr.w	r2, r2, #32
 800183c:	b252      	sxtb	r2, r2
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	f002 021f 	and.w	r2, r2, #31
 8001844:	2101      	movs	r1, #1
 8001846:	fa01 f202 	lsl.w	r2, r1, r2
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d007      	beq.n	8001860 <HAL_RCC_OscConfig+0x3c4>
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d002      	beq.n	8001860 <HAL_RCC_OscConfig+0x3c4>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	f000 bd05 	b.w	800226a <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b9f      	ldr	r3, [pc, #636]	; (8001ae0 <HAL_RCC_OscConfig+0x644>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6919      	ldr	r1, [r3, #16]
 800186e:	23f8      	movs	r3, #248	; 0xf8
 8001870:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001878:	fa93 f3a3 	rbit	r3, r3
 800187c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001880:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	fa01 f303 	lsl.w	r3, r1, r3
 800188c:	4994      	ldr	r1, [pc, #592]	; (8001ae0 <HAL_RCC_OscConfig+0x644>)
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	e0f5      	b.n	8001a80 <HAL_RCC_OscConfig+0x5e4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8085 	beq.w	80019aa <HAL_RCC_OscConfig+0x50e>
 80018a0:	2301      	movs	r3, #1
 80018a2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80018aa:	fa93 f3a3 	rbit	r3, r3
 80018ae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 80018b2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	461a      	mov	r2, r3
 80018c6:	2301      	movs	r3, #1
 80018c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7fe fcdd 	bl	8000288 <HAL_GetTick>
 80018ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_OscConfig+0x44e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d4:	f7fe fcd8 	bl	8000288 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d902      	bls.n	80018ea <HAL_RCC_OscConfig+0x44e>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	f000 bcc0 	b.w	800226a <HAL_RCC_OscConfig+0xdce>
 80018ea:	2302      	movs	r3, #2
 80018ec:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 80018fc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d102      	bne.n	800191a <HAL_RCC_OscConfig+0x47e>
 8001914:	4b72      	ldr	r3, [pc, #456]	; (8001ae0 <HAL_RCC_OscConfig+0x644>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	e013      	b.n	8001942 <HAL_RCC_OscConfig+0x4a6>
 800191a:	2302      	movs	r3, #2
 800191c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001924:	fa93 f3a3 	rbit	r3, r3
 8001928:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800192c:	2302      	movs	r3, #2
 800192e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001932:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001936:	fa93 f3a3 	rbit	r3, r3
 800193a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800193e:	4b68      	ldr	r3, [pc, #416]	; (8001ae0 <HAL_RCC_OscConfig+0x644>)
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	2202      	movs	r2, #2
 8001944:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001948:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800194c:	fa92 f2a2 	rbit	r2, r2
 8001950:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001954:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001958:	fab2 f282 	clz	r2, r2
 800195c:	b252      	sxtb	r2, r2
 800195e:	f042 0220 	orr.w	r2, r2, #32
 8001962:	b252      	sxtb	r2, r2
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	f002 021f 	and.w	r2, r2, #31
 800196a:	2101      	movs	r1, #1
 800196c:	fa01 f202 	lsl.w	r2, r1, r2
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0ae      	beq.n	80018d4 <HAL_RCC_OscConfig+0x438>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001976:	4b5a      	ldr	r3, [pc, #360]	; (8001ae0 <HAL_RCC_OscConfig+0x644>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6919      	ldr	r1, [r3, #16]
 8001984:	23f8      	movs	r3, #248	; 0xf8
 8001986:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001996:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	494f      	ldr	r1, [pc, #316]	; (8001ae0 <HAL_RCC_OscConfig+0x644>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
 80019a8:	e06a      	b.n	8001a80 <HAL_RCC_OscConfig+0x5e4>
 80019aa:	2301      	movs	r3, #1
 80019ac:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 80019bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c0:	fab3 f383 	clz	r3, r3
 80019c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	461a      	mov	r2, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7fe fc58 	bl	8000288 <HAL_GetTick>
 80019d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_OscConfig+0x558>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019de:	f7fe fc53 	bl	8000288 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d902      	bls.n	80019f4 <HAL_RCC_OscConfig+0x558>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	f000 bc3b 	b.w	800226a <HAL_RCC_OscConfig+0xdce>
 80019f4:	2302      	movs	r3, #2
 80019f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8001a06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	095b      	lsrs	r3, r3, #5
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d102      	bne.n	8001a24 <HAL_RCC_OscConfig+0x588>
 8001a1e:	4b30      	ldr	r3, [pc, #192]	; (8001ae0 <HAL_RCC_OscConfig+0x644>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	e013      	b.n	8001a4c <HAL_RCC_OscConfig+0x5b0>
 8001a24:	2302      	movs	r3, #2
 8001a26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a36:	2302      	movs	r3, #2
 8001a38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <HAL_RCC_OscConfig+0x644>)
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001a52:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001a56:	fa92 f2a2 	rbit	r2, r2
 8001a5a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001a5e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a62:	fab2 f282 	clz	r2, r2
 8001a66:	b252      	sxtb	r2, r2
 8001a68:	f042 0220 	orr.w	r2, r2, #32
 8001a6c:	b252      	sxtb	r2, r2
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	f002 021f 	and.w	r2, r2, #31
 8001a74:	2101      	movs	r1, #1
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1ae      	bne.n	80019de <HAL_RCC_OscConfig+0x542>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 80d7 	beq.w	8001c3e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d066      	beq.n	8001b68 <HAL_RCC_OscConfig+0x6cc>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001aa4:	fa93 f3a3 	rbit	r3, r3
 8001aa8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001aac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_RCC_OscConfig+0x648>)
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	461a      	mov	r2, r3
 8001abe:	2301      	movs	r3, #1
 8001ac0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac2:	f7fe fbe1 	bl	8000288 <HAL_GetTick>
 8001ac6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	e00d      	b.n	8001ae8 <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001acc:	f7fe fbdc 	bl	8000288 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d905      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e3c4      	b.n	800226a <HAL_RCC_OscConfig+0xdce>
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	10908120 	.word	0x10908120
 8001ae8:	2302      	movs	r3, #2
 8001aea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001afa:	2302      	movs	r3, #2
 8001afc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001b12:	2202      	movs	r2, #2
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	fa93 f2a3 	rbit	r2, r3
 8001b20:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b26:	4ba5      	ldr	r3, [pc, #660]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b2a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b2e:	2102      	movs	r1, #2
 8001b30:	6019      	str	r1, [r3, #0]
 8001b32:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	fa93 f1a3 	rbit	r1, r3
 8001b3c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b40:	6019      	str	r1, [r3, #0]
  return(result);
 8001b42:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b25b      	sxtb	r3, r3
 8001b4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b52:	b25b      	sxtb	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0b2      	beq.n	8001acc <HAL_RCC_OscConfig+0x630>
 8001b66:	e06a      	b.n	8001c3e <HAL_RCC_OscConfig+0x7a2>
 8001b68:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	fa93 f2a3 	rbit	r2, r3
 8001b7a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b7e:	601a      	str	r2, [r3, #0]
  return(result);
 8001b80:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b84:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b8c      	ldr	r3, [pc, #560]	; (8001dc0 <HAL_RCC_OscConfig+0x924>)
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	461a      	mov	r2, r3
 8001b94:	2300      	movs	r3, #0
 8001b96:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b98:	f7fe fb76 	bl	8000288 <HAL_GetTick>
 8001b9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba0:	e009      	b.n	8001bb6 <HAL_RCC_OscConfig+0x71a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba2:	f7fe fb71 	bl	8000288 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e359      	b.n	800226a <HAL_RCC_OscConfig+0xdce>
 8001bb6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bba:	2202      	movs	r2, #2
 8001bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	fa93 f2a3 	rbit	r2, r3
 8001bc8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	fa93 f2a3 	rbit	r2, r3
 8001be0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bea:	2202      	movs	r2, #2
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	fa93 f2a3 	rbit	r2, r3
 8001bf8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bfc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfe:	4b6f      	ldr	r3, [pc, #444]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c02:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c06:	2102      	movs	r1, #2
 8001c08:	6019      	str	r1, [r3, #0]
 8001c0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	fa93 f1a3 	rbit	r1, r3
 8001c14:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c18:	6019      	str	r1, [r3, #0]
  return(result);
 8001c1a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c2a:	b25b      	sxtb	r3, r3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	2101      	movs	r1, #1
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1b1      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x706>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 8159 	beq.w	8001f00 <HAL_RCC_OscConfig+0xa64>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c54:	4b59      	ldr	r3, [pc, #356]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d112      	bne.n	8001c86 <HAL_RCC_OscConfig+0x7ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c60:	4b56      	ldr	r3, [pc, #344]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	4a55      	ldr	r2, [pc, #340]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	61d3      	str	r3, [r2, #28]
 8001c6c:	4b53      	ldr	r3, [pc, #332]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c80:	2301      	movs	r3, #1
 8001c82:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c86:	4b4f      	ldr	r3, [pc, #316]	; (8001dc4 <HAL_RCC_OscConfig+0x928>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d11a      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x82c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c92:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <HAL_RCC_OscConfig+0x928>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a4b      	ldr	r2, [pc, #300]	; (8001dc4 <HAL_RCC_OscConfig+0x928>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9e:	f7fe faf3 	bl	8000288 <HAL_GetTick>
 8001ca2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	e009      	b.n	8001cbc <HAL_RCC_OscConfig+0x820>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca8:	f7fe faee 	bl	8000288 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b64      	cmp	r3, #100	; 0x64
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x820>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e2d6      	b.n	800226a <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <HAL_RCC_OscConfig+0x928>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0ef      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x80c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d106      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x844>
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4a39      	ldr	r2, [pc, #228]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6213      	str	r3, [r2, #32]
 8001cde:	e02f      	b.n	8001d40 <HAL_RCC_OscConfig+0x8a4>
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x868>
 8001cea:	4b34      	ldr	r3, [pc, #208]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a33      	ldr	r2, [pc, #204]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	6213      	str	r3, [r2, #32]
 8001cf6:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4a30      	ldr	r2, [pc, #192]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001cfc:	f023 0304 	bic.w	r3, r3, #4
 8001d00:	6213      	str	r3, [r2, #32]
 8001d02:	e01d      	b.n	8001d40 <HAL_RCC_OscConfig+0x8a4>
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b05      	cmp	r3, #5
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x88c>
 8001d0e:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a2a      	ldr	r2, [pc, #168]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	6213      	str	r3, [r2, #32]
 8001d1a:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4a27      	ldr	r2, [pc, #156]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6213      	str	r3, [r2, #32]
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0x8a4>
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	6213      	str	r3, [r2, #32]
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4a20      	ldr	r2, [pc, #128]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001d3a:	f023 0304 	bic.w	r3, r3, #4
 8001d3e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d06b      	beq.n	8001e22 <HAL_RCC_OscConfig+0x986>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7fe fa9d 	bl	8000288 <HAL_GetTick>
 8001d4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d52:	e00b      	b.n	8001d6c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d54:	f7fe fa98 	bl	8000288 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e27e      	b.n	800226a <HAL_RCC_OscConfig+0xdce>
 8001d6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d70:	2202      	movs	r2, #2
 8001d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	fa93 f2a3 	rbit	r2, r3
 8001d7e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d88:	2202      	movs	r2, #2
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f2a3 	rbit	r2, r3
 8001d96:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d9a:	601a      	str	r2, [r3, #0]
  return(result);
 8001d9c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001da0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	095b      	lsrs	r3, r3, #5
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d108      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x92c>
 8001db6:	4b01      	ldr	r3, [pc, #4]	; (8001dbc <HAL_RCC_OscConfig+0x920>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	e013      	b.n	8001de4 <HAL_RCC_OscConfig+0x948>
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	10908120 	.word	0x10908120
 8001dc4:	40007000 	.word	0x40007000
 8001dc8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001dcc:	2202      	movs	r2, #2
 8001dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fa93 f2a3 	rbit	r2, r3
 8001dda:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	4bc0      	ldr	r3, [pc, #768]	; (80020e4 <HAL_RCC_OscConfig+0xc48>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001de8:	2102      	movs	r1, #2
 8001dea:	6011      	str	r1, [r2, #0]
 8001dec:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	fa92 f1a2 	rbit	r1, r2
 8001df6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001dfa:	6011      	str	r1, [r2, #0]
  return(result);
 8001dfc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	fab2 f282 	clz	r2, r2
 8001e06:	b252      	sxtb	r2, r2
 8001e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e0c:	b252      	sxtb	r2, r2
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	f002 021f 	and.w	r2, r2, #31
 8001e14:	2101      	movs	r1, #1
 8001e16:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d099      	beq.n	8001d54 <HAL_RCC_OscConfig+0x8b8>
 8001e20:	e064      	b.n	8001eec <HAL_RCC_OscConfig+0xa50>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e22:	f7fe fa31 	bl	8000288 <HAL_GetTick>
 8001e26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7fe fa2c 	bl	8000288 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e212      	b.n	800226a <HAL_RCC_OscConfig+0xdce>
 8001e44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e48:	2202      	movs	r2, #2
 8001e4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f2a3 	rbit	r2, r3
 8001e56:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e60:	2202      	movs	r2, #2
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f2a3 	rbit	r2, r3
 8001e6e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e72:	601a      	str	r2, [r3, #0]
  return(result);
 8001e74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e78:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d102      	bne.n	8001e94 <HAL_RCC_OscConfig+0x9f8>
 8001e8e:	4b95      	ldr	r3, [pc, #596]	; (80020e4 <HAL_RCC_OscConfig+0xc48>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	e00d      	b.n	8001eb0 <HAL_RCC_OscConfig+0xa14>
 8001e94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e98:	2202      	movs	r2, #2
 8001e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	fa93 f2a3 	rbit	r2, r3
 8001ea6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	4b8d      	ldr	r3, [pc, #564]	; (80020e4 <HAL_RCC_OscConfig+0xc48>)
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001eb4:	2102      	movs	r1, #2
 8001eb6:	6011      	str	r1, [r2, #0]
 8001eb8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	fa92 f1a2 	rbit	r1, r2
 8001ec2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ec6:	6011      	str	r1, [r2, #0]
  return(result);
 8001ec8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	fab2 f282 	clz	r2, r2
 8001ed2:	b252      	sxtb	r2, r2
 8001ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ed8:	b252      	sxtb	r2, r2
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	f002 021f 	and.w	r2, r2, #31
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d19f      	bne.n	8001e2c <HAL_RCC_OscConfig+0x990>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d105      	bne.n	8001f00 <HAL_RCC_OscConfig+0xa64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef4:	4b7b      	ldr	r3, [pc, #492]	; (80020e4 <HAL_RCC_OscConfig+0xc48>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	4a7a      	ldr	r2, [pc, #488]	; (80020e4 <HAL_RCC_OscConfig+0xc48>)
 8001efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 81ae 	beq.w	8002268 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0c:	4b75      	ldr	r3, [pc, #468]	; (80020e4 <HAL_RCC_OscConfig+0xc48>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	f000 81a5 	beq.w	8002264 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	f040 811d 	bne.w	8002160 <HAL_RCC_OscConfig+0xcc4>
 8001f26:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f3e:	601a      	str	r2, [r3, #0]
  return(result);
 8001f40:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f44:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	461a      	mov	r2, r3
 8001f56:	2300      	movs	r3, #0
 8001f58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7fe f995 	bl	8000288 <HAL_GetTick>
 8001f5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f62:	e009      	b.n	8001f78 <HAL_RCC_OscConfig+0xadc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f64:	f7fe f990 	bl	8000288 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0xadc>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e178      	b.n	800226a <HAL_RCC_OscConfig+0xdce>
 8001f78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fa93 f2a3 	rbit	r2, r3
 8001f8c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f90:	601a      	str	r2, [r3, #0]
  return(result);
 8001f92:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d102      	bne.n	8001fb2 <HAL_RCC_OscConfig+0xb16>
 8001fac:	4b4d      	ldr	r3, [pc, #308]	; (80020e4 <HAL_RCC_OscConfig+0xc48>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	e01b      	b.n	8001fea <HAL_RCC_OscConfig+0xb4e>
 8001fb2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001fb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fa93 f2a3 	rbit	r2, r3
 8001fc6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	fa93 f2a3 	rbit	r2, r3
 8001fe0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	; (80020e4 <HAL_RCC_OscConfig+0xc48>)
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001fee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ff2:	6011      	str	r1, [r2, #0]
 8001ff4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	fa92 f1a2 	rbit	r1, r2
 8001ffe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002002:	6011      	str	r1, [r2, #0]
  return(result);
 8002004:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	fab2 f282 	clz	r2, r2
 800200e:	b252      	sxtb	r2, r2
 8002010:	f042 0220 	orr.w	r2, r2, #32
 8002014:	b252      	sxtb	r2, r2
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	f002 021f 	and.w	r2, r2, #31
 800201c:	2101      	movs	r1, #1
 800201e:	fa01 f202 	lsl.w	r2, r1, r2
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d19d      	bne.n	8001f64 <HAL_RCC_OscConfig+0xac8>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002028:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <HAL_RCC_OscConfig+0xc48>)
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	f023 020f 	bic.w	r2, r3, #15
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	492b      	ldr	r1, [pc, #172]	; (80020e4 <HAL_RCC_OscConfig+0xc48>)
 8002038:	4313      	orrs	r3, r2
 800203a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800203c:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <HAL_RCC_OscConfig+0xc48>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6a19      	ldr	r1, [r3, #32]
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	430b      	orrs	r3, r1
 8002052:	4924      	ldr	r1, [pc, #144]	; (80020e4 <HAL_RCC_OscConfig+0xc48>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
 8002058:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800205c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	fa93 f2a3 	rbit	r2, r3
 800206c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002070:	601a      	str	r2, [r3, #0]
  return(result);
 8002072:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002076:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002080:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	461a      	mov	r2, r3
 8002088:	2301      	movs	r3, #1
 800208a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7fe f8fc 	bl	8000288 <HAL_GetTick>
 8002090:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002094:	e009      	b.n	80020aa <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002096:	f7fe f8f7 	bl	8000288 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e0df      	b.n	800226a <HAL_RCC_OscConfig+0xdce>
 80020aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	fa93 f2a3 	rbit	r2, r3
 80020be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020c2:	601a      	str	r2, [r3, #0]
  return(result);
 80020c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	095b      	lsrs	r3, r3, #5
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d104      	bne.n	80020e8 <HAL_RCC_OscConfig+0xc4c>
 80020de:	4b01      	ldr	r3, [pc, #4]	; (80020e4 <HAL_RCC_OscConfig+0xc48>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	e01d      	b.n	8002120 <HAL_RCC_OscConfig+0xc84>
 80020e4:	40021000 	.word	0x40021000
 80020e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	fa93 f2a3 	rbit	r2, r3
 80020fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002106:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	fa93 f2a3 	rbit	r2, r3
 8002116:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	4b55      	ldr	r3, [pc, #340]	; (8002274 <HAL_RCC_OscConfig+0xdd8>)
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002124:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002128:	6011      	str	r1, [r2, #0]
 800212a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	fa92 f1a2 	rbit	r1, r2
 8002134:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002138:	6011      	str	r1, [r2, #0]
  return(result);
 800213a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	fab2 f282 	clz	r2, r2
 8002144:	b252      	sxtb	r2, r2
 8002146:	f042 0220 	orr.w	r2, r2, #32
 800214a:	b252      	sxtb	r2, r2
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f002 021f 	and.w	r2, r2, #31
 8002152:	2101      	movs	r1, #1
 8002154:	fa01 f202 	lsl.w	r2, r1, r2
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d09b      	beq.n	8002096 <HAL_RCC_OscConfig+0xbfa>
 800215e:	e083      	b.n	8002268 <HAL_RCC_OscConfig+0xdcc>
 8002160:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002164:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002168:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	fa93 f2a3 	rbit	r2, r3
 8002174:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002178:	601a      	str	r2, [r3, #0]
  return(result);
 800217a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800217e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002188:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	461a      	mov	r2, r3
 8002190:	2300      	movs	r3, #0
 8002192:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7fe f878 	bl	8000288 <HAL_GetTick>
 8002198:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219c:	e009      	b.n	80021b2 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219e:	f7fe f873 	bl	8000288 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e05b      	b.n	800226a <HAL_RCC_OscConfig+0xdce>
 80021b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	fa93 f2a3 	rbit	r2, r3
 80021c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ca:	601a      	str	r2, [r3, #0]
  return(result);
 80021cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d102      	bne.n	80021ec <HAL_RCC_OscConfig+0xd50>
 80021e6:	4b23      	ldr	r3, [pc, #140]	; (8002274 <HAL_RCC_OscConfig+0xdd8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	e01b      	b.n	8002224 <HAL_RCC_OscConfig+0xd88>
 80021ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	fa93 f2a3 	rbit	r2, r3
 8002200:	f107 0320 	add.w	r3, r7, #32
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	fa93 f2a3 	rbit	r2, r3
 800221a:	f107 0318 	add.w	r3, r7, #24
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_RCC_OscConfig+0xdd8>)
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	f107 0214 	add.w	r2, r7, #20
 8002228:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800222c:	6011      	str	r1, [r2, #0]
 800222e:	f107 0214 	add.w	r2, r7, #20
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	fa92 f1a2 	rbit	r1, r2
 8002238:	f107 0210 	add.w	r2, r7, #16
 800223c:	6011      	str	r1, [r2, #0]
  return(result);
 800223e:	f107 0210 	add.w	r2, r7, #16
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	fab2 f282 	clz	r2, r2
 8002248:	b252      	sxtb	r2, r2
 800224a:	f042 0220 	orr.w	r2, r2, #32
 800224e:	b252      	sxtb	r2, r2
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	f002 021f 	and.w	r2, r2, #31
 8002256:	2101      	movs	r1, #1
 8002258:	fa01 f202 	lsl.w	r2, r1, r2
 800225c:	4013      	ands	r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d19d      	bne.n	800219e <HAL_RCC_OscConfig+0xd02>
 8002262:	e001      	b.n	8002268 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000

08002278 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b09e      	sub	sp, #120	; 0x78
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e164      	b.n	800255a <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002290:	4b92      	ldr	r3, [pc, #584]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d910      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b8f      	ldr	r3, [pc, #572]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 0207 	bic.w	r2, r3, #7
 80022a6:	498d      	ldr	r1, [pc, #564]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b8b      	ldr	r3, [pc, #556]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e14c      	b.n	800255a <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022cc:	4b84      	ldr	r3, [pc, #528]	; (80024e0 <HAL_RCC_ClockConfig+0x268>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4981      	ldr	r1, [pc, #516]	; (80024e0 <HAL_RCC_ClockConfig+0x268>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80df 	beq.w	80024aa <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d13d      	bne.n	8002370 <HAL_RCC_ClockConfig+0xf8>
 80022f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8002302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d102      	bne.n	800231e <HAL_RCC_ClockConfig+0xa6>
 8002318:	4b71      	ldr	r3, [pc, #452]	; (80024e0 <HAL_RCC_ClockConfig+0x268>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	e00f      	b.n	800233e <HAL_RCC_ClockConfig+0xc6>
 800231e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002322:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	667b      	str	r3, [r7, #100]	; 0x64
 800232c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002330:	663b      	str	r3, [r7, #96]	; 0x60
 8002332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800233a:	4b69      	ldr	r3, [pc, #420]	; (80024e0 <HAL_RCC_ClockConfig+0x268>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002342:	65ba      	str	r2, [r7, #88]	; 0x58
 8002344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002346:	fa92 f2a2 	rbit	r2, r2
 800234a:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 800234c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800234e:	fab2 f282 	clz	r2, r2
 8002352:	b252      	sxtb	r2, r2
 8002354:	f042 0220 	orr.w	r2, r2, #32
 8002358:	b252      	sxtb	r2, r2
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	f002 021f 	and.w	r2, r2, #31
 8002360:	2101      	movs	r1, #1
 8002362:	fa01 f202 	lsl.w	r2, r1, r2
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d17d      	bne.n	8002468 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0f4      	b.n	800255a <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d13d      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x17c>
 8002378:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800237c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d102      	bne.n	80023a2 <HAL_RCC_ClockConfig+0x12a>
 800239c:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <HAL_RCC_ClockConfig+0x268>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	e00f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x14a>
 80023a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	647b      	str	r3, [r7, #68]	; 0x44
 80023b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b4:	643b      	str	r3, [r7, #64]	; 0x40
 80023b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023be:	4b48      	ldr	r3, [pc, #288]	; (80024e0 <HAL_RCC_ClockConfig+0x268>)
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c6:	63ba      	str	r2, [r7, #56]	; 0x38
 80023c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023ca:	fa92 f2a2 	rbit	r2, r2
 80023ce:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80023d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023d2:	fab2 f282 	clz	r2, r2
 80023d6:	b252      	sxtb	r2, r2
 80023d8:	f042 0220 	orr.w	r2, r2, #32
 80023dc:	b252      	sxtb	r2, r2
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f002 021f 	and.w	r2, r2, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d13b      	bne.n	8002468 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0b2      	b.n	800255a <HAL_RCC_ClockConfig+0x2e2>
 80023f4:	2302      	movs	r3, #2
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d102      	bne.n	800241c <HAL_RCC_ClockConfig+0x1a4>
 8002416:	4b32      	ldr	r3, [pc, #200]	; (80024e0 <HAL_RCC_ClockConfig+0x268>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	e00d      	b.n	8002438 <HAL_RCC_ClockConfig+0x1c0>
 800241c:	2302      	movs	r3, #2
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
 8002428:	2302      	movs	r3, #2
 800242a:	623b      	str	r3, [r7, #32]
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <HAL_RCC_ClockConfig+0x268>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	2202      	movs	r2, #2
 800243a:	61ba      	str	r2, [r7, #24]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	fa92 f2a2 	rbit	r2, r2
 8002442:	617a      	str	r2, [r7, #20]
  return(result);
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	fab2 f282 	clz	r2, r2
 800244a:	b252      	sxtb	r2, r2
 800244c:	f042 0220 	orr.w	r2, r2, #32
 8002450:	b252      	sxtb	r2, r2
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	f002 021f 	and.w	r2, r2, #31
 8002458:	2101      	movs	r1, #1
 800245a:	fa01 f202 	lsl.w	r2, r1, r2
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e078      	b.n	800255a <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002468:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <HAL_RCC_ClockConfig+0x268>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 0203 	bic.w	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	491a      	ldr	r1, [pc, #104]	; (80024e0 <HAL_RCC_ClockConfig+0x268>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800247a:	f7fd ff05 	bl	8000288 <HAL_GetTick>
 800247e:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002480:	e00a      	b.n	8002498 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002482:	f7fd ff01 	bl	8000288 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e060      	b.n	800255a <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_RCC_ClockConfig+0x268>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 020c 	and.w	r2, r3, #12
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d1eb      	bne.n	8002482 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024aa:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d215      	bcs.n	80024e4 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 0207 	bic.w	r2, r3, #7
 80024c0:	4906      	ldr	r1, [pc, #24]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <HAL_RCC_ClockConfig+0x264>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d006      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e03f      	b.n	800255a <HAL_RCC_ClockConfig+0x2e2>
 80024da:	bf00      	nop
 80024dc:	40022000 	.word	0x40022000
 80024e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f0:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <HAL_RCC_ClockConfig+0x2ec>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4919      	ldr	r1, [pc, #100]	; (8002564 <HAL_RCC_ClockConfig+0x2ec>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <HAL_RCC_ClockConfig+0x2ec>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4911      	ldr	r1, [pc, #68]	; (8002564 <HAL_RCC_ClockConfig+0x2ec>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002522:	f000 f825 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 8002526:	4601      	mov	r1, r0
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <HAL_RCC_ClockConfig+0x2ec>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002530:	23f0      	movs	r3, #240	; 0xf0
 8002532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	60fb      	str	r3, [r7, #12]
  return(result);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	fa22 f303 	lsr.w	r3, r2, r3
 8002546:	4a08      	ldr	r2, [pc, #32]	; (8002568 <HAL_RCC_ClockConfig+0x2f0>)
 8002548:	5cd3      	ldrb	r3, [r2, r3]
 800254a:	fa21 f303 	lsr.w	r3, r1, r3
 800254e:	4a07      	ldr	r2, [pc, #28]	; (800256c <HAL_RCC_ClockConfig+0x2f4>)
 8002550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002552:	2000      	movs	r0, #0
 8002554:	f7fd fe54 	bl	8000200 <HAL_InitTick>
  
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3778      	adds	r7, #120	; 0x78
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	08003950 	.word	0x08003950
 800256c:	20000008 	.word	0x20000008

08002570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002570:	b480      	push	{r7}
 8002572:	b08b      	sub	sp, #44	; 0x2c
 8002574:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	2300      	movs	r3, #0
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800258a:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <HAL_RCC_GetSysClockFreq+0xc4>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b04      	cmp	r3, #4
 8002598:	d002      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x30>
 800259a:	2b08      	cmp	r3, #8
 800259c:	d003      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0x36>
 800259e:	e03f      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025a0:	4b25      	ldr	r3, [pc, #148]	; (8002638 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025a2:	623b      	str	r3, [r7, #32]
      break;
 80025a4:	e03f      	b.n	8002626 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025ac:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80025b0:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	607b      	str	r3, [r7, #4]
  return(result);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
 80025c4:	4a1d      	ldr	r2, [pc, #116]	; (800263c <HAL_RCC_GetSysClockFreq+0xcc>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	f003 020f 	and.w	r2, r3, #15
 80025d2:	230f      	movs	r3, #15
 80025d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
 80025e8:	4a15      	ldr	r2, [pc, #84]	; (8002640 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025ea:	5cd3      	ldrb	r3, [r2, r3]
 80025ec:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80025f8:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
 8002608:	e007      	b.n	800261a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800260a:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <HAL_RCC_GetSysClockFreq+0xc8>)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	fb02 f303 	mul.w	r3, r2, r3
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	623b      	str	r3, [r7, #32]
      break;
 800261e:	e002      	b.n	8002626 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002622:	623b      	str	r3, [r7, #32]
      break;
 8002624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002626:	6a3b      	ldr	r3, [r7, #32]
}
 8002628:	4618      	mov	r0, r3
 800262a:	372c      	adds	r7, #44	; 0x2c
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	40021000 	.word	0x40021000
 8002638:	007a1200 	.word	0x007a1200
 800263c:	08003930 	.word	0x08003930
 8002640:	08003940 	.word	0x08003940

08002644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_RCC_GetHCLKFreq+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000008 	.word	0x20000008

0800265c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002662:	f7ff ffef 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 8002666:	4601      	mov	r1, r0
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002670:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002674:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	603b      	str	r3, [r7, #0]
  return(result);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
 8002688:	4a04      	ldr	r2, [pc, #16]	; (800269c <HAL_RCC_GetPCLK1Freq+0x40>)
 800268a:	5cd3      	ldrb	r3, [r2, r3]
 800268c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	08003960 	.word	0x08003960

080026a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80026a6:	f7ff ffcd 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 80026aa:	4601      	mov	r1, r0
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80026b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80026b8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	603b      	str	r3, [r7, #0]
  return(result);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	fab3 f383 	clz	r3, r3
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
 80026cc:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80026ce:	5cd3      	ldrb	r3, [r2, r3]
 80026d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000
 80026e0:	08003960 	.word	0x08003960

080026e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b092      	sub	sp, #72	; 0x48
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80d6 	beq.w	80028ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002708:	4b4d      	ldr	r3, [pc, #308]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10e      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002714:	4b4a      	ldr	r3, [pc, #296]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	4a49      	ldr	r2, [pc, #292]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800271a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271e:	61d3      	str	r3, [r2, #28]
 8002720:	4b47      	ldr	r3, [pc, #284]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272c:	2301      	movs	r3, #1
 800272e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b44      	ldr	r3, [pc, #272]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d118      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273e:	4b41      	ldr	r3, [pc, #260]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a40      	ldr	r2, [pc, #256]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274a:	f7fd fd9d 	bl	8000288 <HAL_GetTick>
 800274e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	e008      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002752:	f7fd fd99 	bl	8000288 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b64      	cmp	r3, #100	; 0x64
 800275e:	d901      	bls.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e1d4      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002764:	4b37      	ldr	r3, [pc, #220]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002770:	4b33      	ldr	r3, [pc, #204]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002778:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800277a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8083 	beq.w	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800278c:	429a      	cmp	r2, r3
 800278e:	d07b      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002790:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800279a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800279e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	4b25      	ldr	r3, [pc, #148]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	461a      	mov	r2, r3
 80027b8:	2301      	movs	r3, #1
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80027ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	461a      	mov	r2, r3
 80027da:	2300      	movs	r3, #0
 80027dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027de:	4a18      	ldr	r2, [pc, #96]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80027e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d04c      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fd fd4b 	bl	8000288 <HAL_GetTick>
 80027f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f4:	e00a      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7fd fd47 	bl	8000288 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	; 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e180      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800280c:	2302      	movs	r3, #2
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
 8002818:	2302      	movs	r3, #2
 800281a:	623b      	str	r3, [r7, #32]
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	61fb      	str	r3, [r7, #28]
  return(result);
 8002824:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d108      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800283a:	4b01      	ldr	r3, [pc, #4]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	e00d      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002840:	40021000 	.word	0x40021000
 8002844:	40007000 	.word	0x40007000
 8002848:	10908100 	.word	0x10908100
 800284c:	2302      	movs	r3, #2
 800284e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	4b9c      	ldr	r3, [pc, #624]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	2202      	movs	r2, #2
 800285e:	613a      	str	r2, [r7, #16]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	fa92 f2a2 	rbit	r2, r2
 8002866:	60fa      	str	r2, [r7, #12]
  return(result);
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	fab2 f282 	clz	r2, r2
 800286e:	b252      	sxtb	r2, r2
 8002870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002874:	b252      	sxtb	r2, r2
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f002 021f 	and.w	r2, r2, #31
 800287c:	2101      	movs	r1, #1
 800287e:	fa01 f202 	lsl.w	r2, r1, r2
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0b6      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002888:	4b90      	ldr	r3, [pc, #576]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	498d      	ldr	r1, [pc, #564]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002896:	4313      	orrs	r3, r2
 8002898:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800289a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d105      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a2:	4b8a      	ldr	r3, [pc, #552]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	4a89      	ldr	r2, [pc, #548]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ac:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ba:	4b84      	ldr	r3, [pc, #528]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f023 0203 	bic.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4981      	ldr	r1, [pc, #516]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028d8:	4b7c      	ldr	r3, [pc, #496]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4979      	ldr	r1, [pc, #484]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028f6:	4b75      	ldr	r3, [pc, #468]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	4972      	ldr	r1, [pc, #456]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002904:	4313      	orrs	r3, r2
 8002906:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0320 	and.w	r3, r3, #32
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002914:	4b6d      	ldr	r3, [pc, #436]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f023 0210 	bic.w	r2, r3, #16
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	496a      	ldr	r1, [pc, #424]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002922:	4313      	orrs	r3, r2
 8002924:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002932:	4b66      	ldr	r3, [pc, #408]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	4963      	ldr	r1, [pc, #396]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002950:	4b5e      	ldr	r3, [pc, #376]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	f023 0220 	bic.w	r2, r3, #32
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	495b      	ldr	r1, [pc, #364]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d008      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800296e:	4b57      	ldr	r3, [pc, #348]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	4954      	ldr	r1, [pc, #336]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800297c:	4313      	orrs	r3, r2
 800297e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800298c:	4b4f      	ldr	r3, [pc, #316]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	494c      	ldr	r1, [pc, #304]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800299a:	4313      	orrs	r3, r2
 800299c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029aa:	4b48      	ldr	r3, [pc, #288]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	4945      	ldr	r1, [pc, #276]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029c8:	4b40      	ldr	r3, [pc, #256]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	493d      	ldr	r1, [pc, #244]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d008      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029e6:	4b39      	ldr	r3, [pc, #228]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	4936      	ldr	r1, [pc, #216]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a04:	4b31      	ldr	r3, [pc, #196]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	492e      	ldr	r1, [pc, #184]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d008      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a22:	4b2a      	ldr	r3, [pc, #168]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2e:	4927      	ldr	r1, [pc, #156]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a40:	4b22      	ldr	r3, [pc, #136]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	491f      	ldr	r1, [pc, #124]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d008      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6a:	4918      	ldr	r1, [pc, #96]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	4910      	ldr	r1, [pc, #64]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d008      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	4909      	ldr	r1, [pc, #36]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00b      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac4:	4901      	ldr	r1, [pc, #4]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	630b      	str	r3, [r1, #48]	; 0x30
 8002aca:	e001      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002acc:	40021000 	.word	0x40021000
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae8:	490b      	ldr	r1, [pc, #44]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002afa:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b06:	4904      	ldr	r1, [pc, #16]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3748      	adds	r7, #72	; 0x48
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000

08002b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e043      	b.n	8002bb6 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fdc4 	bl	80036d0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2224      	movs	r2, #36	; 0x24
 8002b4c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0201 	bic.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f82d 	bl	8002bc0 <UART_SetConfig>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e022      	b.n	8002bb6 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fa1f 	bl	8002fbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b9c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 faa6 	bl	8003100 <UART_CheckIdleState>
 8002bb4:	4603      	mov	r3, r0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002bcc:	2310      	movs	r3, #16
 8002bce:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4ba7      	ldr	r3, [pc, #668]	; (8002e98 <UART_SetConfig+0x2d8>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	68f9      	ldr	r1, [r7, #12]
 8002c04:	430b      	orrs	r3, r1
 8002c06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a96      	ldr	r2, [pc, #600]	; (8002e9c <UART_SetConfig+0x2dc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d121      	bne.n	8002c8c <UART_SetConfig+0xcc>
 8002c48:	4b95      	ldr	r3, [pc, #596]	; (8002ea0 <UART_SetConfig+0x2e0>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d817      	bhi.n	8002c84 <UART_SetConfig+0xc4>
 8002c54:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <UART_SetConfig+0x9c>)
 8002c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5a:	bf00      	nop
 8002c5c:	08002c6d 	.word	0x08002c6d
 8002c60:	08002c79 	.word	0x08002c79
 8002c64:	08002c7f 	.word	0x08002c7f
 8002c68:	08002c73 	.word	0x08002c73
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	75fb      	strb	r3, [r7, #23]
 8002c70:	e0b2      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002c72:	2302      	movs	r3, #2
 8002c74:	75fb      	strb	r3, [r7, #23]
 8002c76:	e0af      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	75fb      	strb	r3, [r7, #23]
 8002c7c:	e0ac      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002c7e:	2308      	movs	r3, #8
 8002c80:	75fb      	strb	r3, [r7, #23]
 8002c82:	e0a9      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002c84:	2310      	movs	r3, #16
 8002c86:	75fb      	strb	r3, [r7, #23]
 8002c88:	bf00      	nop
 8002c8a:	e0a5      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a84      	ldr	r2, [pc, #528]	; (8002ea4 <UART_SetConfig+0x2e4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d123      	bne.n	8002cde <UART_SetConfig+0x11e>
 8002c96:	4b82      	ldr	r3, [pc, #520]	; (8002ea0 <UART_SetConfig+0x2e0>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca2:	d012      	beq.n	8002cca <UART_SetConfig+0x10a>
 8002ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca8:	d802      	bhi.n	8002cb0 <UART_SetConfig+0xf0>
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <UART_SetConfig+0xfe>
 8002cae:	e012      	b.n	8002cd6 <UART_SetConfig+0x116>
 8002cb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cb4:	d00c      	beq.n	8002cd0 <UART_SetConfig+0x110>
 8002cb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cba:	d003      	beq.n	8002cc4 <UART_SetConfig+0x104>
 8002cbc:	e00b      	b.n	8002cd6 <UART_SetConfig+0x116>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	75fb      	strb	r3, [r7, #23]
 8002cc2:	e089      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	75fb      	strb	r3, [r7, #23]
 8002cc8:	e086      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002cca:	2304      	movs	r3, #4
 8002ccc:	75fb      	strb	r3, [r7, #23]
 8002cce:	e083      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002cd0:	2308      	movs	r3, #8
 8002cd2:	75fb      	strb	r3, [r7, #23]
 8002cd4:	e080      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002cd6:	2310      	movs	r3, #16
 8002cd8:	75fb      	strb	r3, [r7, #23]
 8002cda:	bf00      	nop
 8002cdc:	e07c      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a71      	ldr	r2, [pc, #452]	; (8002ea8 <UART_SetConfig+0x2e8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d123      	bne.n	8002d30 <UART_SetConfig+0x170>
 8002ce8:	4b6d      	ldr	r3, [pc, #436]	; (8002ea0 <UART_SetConfig+0x2e0>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002cf0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cf4:	d012      	beq.n	8002d1c <UART_SetConfig+0x15c>
 8002cf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cfa:	d802      	bhi.n	8002d02 <UART_SetConfig+0x142>
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <UART_SetConfig+0x150>
 8002d00:	e012      	b.n	8002d28 <UART_SetConfig+0x168>
 8002d02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d06:	d00c      	beq.n	8002d22 <UART_SetConfig+0x162>
 8002d08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d0c:	d003      	beq.n	8002d16 <UART_SetConfig+0x156>
 8002d0e:	e00b      	b.n	8002d28 <UART_SetConfig+0x168>
 8002d10:	2300      	movs	r3, #0
 8002d12:	75fb      	strb	r3, [r7, #23]
 8002d14:	e060      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002d16:	2302      	movs	r3, #2
 8002d18:	75fb      	strb	r3, [r7, #23]
 8002d1a:	e05d      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	75fb      	strb	r3, [r7, #23]
 8002d20:	e05a      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002d22:	2308      	movs	r3, #8
 8002d24:	75fb      	strb	r3, [r7, #23]
 8002d26:	e057      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002d28:	2310      	movs	r3, #16
 8002d2a:	75fb      	strb	r3, [r7, #23]
 8002d2c:	bf00      	nop
 8002d2e:	e053      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a5d      	ldr	r2, [pc, #372]	; (8002eac <UART_SetConfig+0x2ec>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d123      	bne.n	8002d82 <UART_SetConfig+0x1c2>
 8002d3a:	4b59      	ldr	r3, [pc, #356]	; (8002ea0 <UART_SetConfig+0x2e0>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d46:	d012      	beq.n	8002d6e <UART_SetConfig+0x1ae>
 8002d48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4c:	d802      	bhi.n	8002d54 <UART_SetConfig+0x194>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <UART_SetConfig+0x1a2>
 8002d52:	e012      	b.n	8002d7a <UART_SetConfig+0x1ba>
 8002d54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d58:	d00c      	beq.n	8002d74 <UART_SetConfig+0x1b4>
 8002d5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d5e:	d003      	beq.n	8002d68 <UART_SetConfig+0x1a8>
 8002d60:	e00b      	b.n	8002d7a <UART_SetConfig+0x1ba>
 8002d62:	2300      	movs	r3, #0
 8002d64:	75fb      	strb	r3, [r7, #23]
 8002d66:	e037      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	75fb      	strb	r3, [r7, #23]
 8002d6c:	e034      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002d6e:	2304      	movs	r3, #4
 8002d70:	75fb      	strb	r3, [r7, #23]
 8002d72:	e031      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002d74:	2308      	movs	r3, #8
 8002d76:	75fb      	strb	r3, [r7, #23]
 8002d78:	e02e      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002d7a:	2310      	movs	r3, #16
 8002d7c:	75fb      	strb	r3, [r7, #23]
 8002d7e:	bf00      	nop
 8002d80:	e02a      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a4a      	ldr	r2, [pc, #296]	; (8002eb0 <UART_SetConfig+0x2f0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d123      	bne.n	8002dd4 <UART_SetConfig+0x214>
 8002d8c:	4b44      	ldr	r3, [pc, #272]	; (8002ea0 <UART_SetConfig+0x2e0>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d98:	d012      	beq.n	8002dc0 <UART_SetConfig+0x200>
 8002d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9e:	d802      	bhi.n	8002da6 <UART_SetConfig+0x1e6>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d007      	beq.n	8002db4 <UART_SetConfig+0x1f4>
 8002da4:	e012      	b.n	8002dcc <UART_SetConfig+0x20c>
 8002da6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002daa:	d00c      	beq.n	8002dc6 <UART_SetConfig+0x206>
 8002dac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002db0:	d003      	beq.n	8002dba <UART_SetConfig+0x1fa>
 8002db2:	e00b      	b.n	8002dcc <UART_SetConfig+0x20c>
 8002db4:	2300      	movs	r3, #0
 8002db6:	75fb      	strb	r3, [r7, #23]
 8002db8:	e00e      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	75fb      	strb	r3, [r7, #23]
 8002dbe:	e00b      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	75fb      	strb	r3, [r7, #23]
 8002dc4:	e008      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	75fb      	strb	r3, [r7, #23]
 8002dca:	e005      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002dcc:	2310      	movs	r3, #16
 8002dce:	75fb      	strb	r3, [r7, #23]
 8002dd0:	bf00      	nop
 8002dd2:	e001      	b.n	8002dd8 <UART_SetConfig+0x218>
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de0:	d17d      	bne.n	8002ede <UART_SetConfig+0x31e>
  {
    switch (clocksource)
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d865      	bhi.n	8002eb4 <UART_SetConfig+0x2f4>
 8002de8:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <UART_SetConfig+0x230>)
 8002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dee:	bf00      	nop
 8002df0:	08002e15 	.word	0x08002e15
 8002df4:	08002e31 	.word	0x08002e31
 8002df8:	08002e4d 	.word	0x08002e4d
 8002dfc:	08002eb5 	.word	0x08002eb5
 8002e00:	08002e67 	.word	0x08002e67
 8002e04:	08002eb5 	.word	0x08002eb5
 8002e08:	08002eb5 	.word	0x08002eb5
 8002e0c:	08002eb5 	.word	0x08002eb5
 8002e10:	08002e83 	.word	0x08002e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e14:	f7ff fc22 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	005a      	lsls	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	085b      	lsrs	r3, r3, #1
 8002e22:	441a      	add	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	82bb      	strh	r3, [r7, #20]
        break;
 8002e2e:	e044      	b.n	8002eba <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002e30:	f7ff fc36 	bl	80026a0 <HAL_RCC_GetPCLK2Freq>
 8002e34:	4603      	mov	r3, r0
 8002e36:	005a      	lsls	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	085b      	lsrs	r3, r3, #1
 8002e3e:	441a      	add	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e48:	82bb      	strh	r3, [r7, #20]
        break;
 8002e4a:	e036      	b.n	8002eba <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002e56:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6852      	ldr	r2, [r2, #4]
 8002e5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e62:	82bb      	strh	r3, [r7, #20]
        break;
 8002e64:	e029      	b.n	8002eba <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e66:	f7ff fb83 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	005a      	lsls	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	085b      	lsrs	r3, r3, #1
 8002e74:	441a      	add	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7e:	82bb      	strh	r3, [r7, #20]
        break;
 8002e80:	e01b      	b.n	8002eba <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	82bb      	strh	r3, [r7, #20]
        break;
 8002e96:	e010      	b.n	8002eba <UART_SetConfig+0x2fa>
 8002e98:	efff69f3 	.word	0xefff69f3
 8002e9c:	40013800 	.word	0x40013800
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40004400 	.word	0x40004400
 8002ea8:	40004800 	.word	0x40004800
 8002eac:	40004c00 	.word	0x40004c00
 8002eb0:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	74fb      	strb	r3, [r7, #19]
        break;
 8002eb8:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002eba:	8abb      	ldrh	r3, [r7, #20]
 8002ebc:	f023 030f 	bic.w	r3, r3, #15
 8002ec0:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ec2:	8abb      	ldrh	r3, [r7, #20]
 8002ec4:	105b      	asrs	r3, r3, #1
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	897b      	ldrh	r3, [r7, #10]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	897a      	ldrh	r2, [r7, #10]
 8002eda:	60da      	str	r2, [r3, #12]
 8002edc:	e069      	b.n	8002fb2 <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d863      	bhi.n	8002fac <UART_SetConfig+0x3ec>
 8002ee4:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <UART_SetConfig+0x32c>)
 8002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eea:	bf00      	nop
 8002eec:	08002f11 	.word	0x08002f11
 8002ef0:	08002f31 	.word	0x08002f31
 8002ef4:	08002f51 	.word	0x08002f51
 8002ef8:	08002fad 	.word	0x08002fad
 8002efc:	08002f71 	.word	0x08002f71
 8002f00:	08002fad 	.word	0x08002fad
 8002f04:	08002fad 	.word	0x08002fad
 8002f08:	08002fad 	.word	0x08002fad
 8002f0c:	08002f91 	.word	0x08002f91
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f10:	f7ff fba4 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	441a      	add	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60da      	str	r2, [r3, #12]
        break;
 8002f2e:	e040      	b.n	8002fb2 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002f30:	f7ff fbb6 	bl	80026a0 <HAL_RCC_GetPCLK2Freq>
 8002f34:	4602      	mov	r2, r0
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	085b      	lsrs	r3, r3, #1
 8002f3c:	441a      	add	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	60da      	str	r2, [r3, #12]
        break;
 8002f4e:	e030      	b.n	8002fb2 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002f5a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6852      	ldr	r2, [r2, #4]
 8002f62:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60da      	str	r2, [r3, #12]
        break;
 8002f6e:	e020      	b.n	8002fb2 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f70:	f7ff fafe 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	441a      	add	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60da      	str	r2, [r3, #12]
        break;
 8002f8e:	e010      	b.n	8002fb2 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	085b      	lsrs	r3, r3, #1
 8002f96:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60da      	str	r2, [r3, #12]
        break;
 8002faa:	e002      	b.n	8002fb2 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	74fb      	strb	r3, [r7, #19]
        break;
 8002fb0:	bf00      	nop
    }
  }

  return ret;
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]

}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01a      	beq.n	80030d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ba:	d10a      	bne.n	80030d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
  }
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af02      	add	r7, sp, #8
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003112:	f7fd f8b9 	bl	8000288 <HAL_GetTick>
 8003116:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b08      	cmp	r3, #8
 8003124:	d10e      	bne.n	8003144 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003126:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f82c 	bl	8003192 <UART_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e022      	b.n	800318a <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b04      	cmp	r3, #4
 8003150:	d10e      	bne.n	8003170 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003152:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f816 	bl	8003192 <UART_WaitOnFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e00c      	b.n	800318a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	603b      	str	r3, [r7, #0]
 800319e:	4613      	mov	r3, r2
 80031a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a2:	e02c      	b.n	80031fe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d028      	beq.n	80031fe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80031b2:	f7fd f869 	bl	8000288 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d21d      	bcs.n	80031fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e00f      	b.n	800321e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4013      	ands	r3, r2
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	bf0c      	ite	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	2300      	movne	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	429a      	cmp	r2, r3
 800321a:	d0c3      	beq.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800322c:	f7fc ffd2 	bl	80001d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003230:	f000 f87c 	bl	800332c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003234:	f000 f93e 	bl	80034b4 <MX_GPIO_Init>
  MX_CAN_Init();
 8003238:	f000 f8d6 	bl	80033e8 <MX_CAN_Init>
  MX_USART2_UART_Init();
 800323c:	f000 f90a 	bl	8003454 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
sFilterConfig.FilterBank = 0;
 8003240:	4b35      	ldr	r3, [pc, #212]	; (8003318 <main+0xf0>)
 8003242:	2200      	movs	r2, #0
 8003244:	615a      	str	r2, [r3, #20]
sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003246:	4b34      	ldr	r3, [pc, #208]	; (8003318 <main+0xf0>)
 8003248:	2200      	movs	r2, #0
 800324a:	619a      	str	r2, [r3, #24]
sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800324c:	4b32      	ldr	r3, [pc, #200]	; (8003318 <main+0xf0>)
 800324e:	2201      	movs	r2, #1
 8003250:	61da      	str	r2, [r3, #28]
sFilterConfig.FilterIdHigh = 0x0000;
 8003252:	4b31      	ldr	r3, [pc, #196]	; (8003318 <main+0xf0>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
sFilterConfig.FilterIdLow = 0x0000;
 8003258:	4b2f      	ldr	r3, [pc, #188]	; (8003318 <main+0xf0>)
 800325a:	2200      	movs	r2, #0
 800325c:	605a      	str	r2, [r3, #4]
sFilterConfig.FilterMaskIdHigh=0x0000;
 800325e:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <main+0xf0>)
 8003260:	2200      	movs	r2, #0
 8003262:	609a      	str	r2, [r3, #8]
sFilterConfig.FilterMaskIdLow = 0x0000;
 8003264:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <main+0xf0>)
 8003266:	2200      	movs	r2, #0
 8003268:	60da      	str	r2, [r3, #12]
sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800326a:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <main+0xf0>)
 800326c:	2200      	movs	r2, #0
 800326e:	611a      	str	r2, [r3, #16]
sFilterConfig.FilterActivation = ENABLE;
 8003270:	4b29      	ldr	r3, [pc, #164]	; (8003318 <main+0xf0>)
 8003272:	2201      	movs	r2, #1
 8003274:	621a      	str	r2, [r3, #32]
sFilterConfig.SlaveStartFilterBank = 14;
 8003276:	4b28      	ldr	r3, [pc, #160]	; (8003318 <main+0xf0>)
 8003278:	220e      	movs	r2, #14
 800327a:	625a      	str	r2, [r3, #36]	; 0x24

if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig)!= HAL_OK){
 800327c:	4926      	ldr	r1, [pc, #152]	; (8003318 <main+0xf0>)
 800327e:	4827      	ldr	r0, [pc, #156]	; (800331c <main+0xf4>)
 8003280:	f7fd f92b 	bl	80004da <HAL_CAN_ConfigFilter>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <main+0x66>
	Error_Handler();
 800328a:	f000 f9a1 	bl	80035d0 <Error_Handler>
}


if(HAL_CAN_Start(&hcan) != HAL_OK){
 800328e:	4823      	ldr	r0, [pc, #140]	; (800331c <main+0xf4>)
 8003290:	f7fd f9ed 	bl	800066e <HAL_CAN_Start>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <main+0x76>
	Error_Handler();
 800329a:	f000 f999 	bl	80035d0 <Error_Handler>
//if(HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MESG_PENDING | CAN_IT_TX_MAILBOX_EMPTY)!=HAL_OK){
//	Error_Handler();
//}


TxHeader.StdId=0x321;
 800329e:	4b20      	ldr	r3, [pc, #128]	; (8003320 <main+0xf8>)
 80032a0:	f240 3221 	movw	r2, #801	; 0x321
 80032a4:	601a      	str	r2, [r3, #0]
TxHeader.ExtId=0x01;
 80032a6:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <main+0xf8>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	605a      	str	r2, [r3, #4]
TxHeader.RTR = CAN_RTR_DATA;
 80032ac:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <main+0xf8>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	60da      	str	r2, [r3, #12]
TxHeader.IDE = CAN_ID_STD;
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <main+0xf8>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	609a      	str	r2, [r3, #8]
TxHeader.DLC = 8;
 80032b8:	4b19      	ldr	r3, [pc, #100]	; (8003320 <main+0xf8>)
 80032ba:	2208      	movs	r2, #8
 80032bc:	611a      	str	r2, [r3, #16]
TxHeader.TransmitGlobalTime = DISABLE;
 80032be:	4b18      	ldr	r3, [pc, #96]	; (8003320 <main+0xf8>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	751a      	strb	r2, [r3, #20]
TxData[0]=1;
 80032c4:	4b17      	ldr	r3, [pc, #92]	; (8003324 <main+0xfc>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	701a      	strb	r2, [r3, #0]
TxData[1]=2;
 80032ca:	4b16      	ldr	r3, [pc, #88]	; (8003324 <main+0xfc>)
 80032cc:	2202      	movs	r2, #2
 80032ce:	705a      	strb	r2, [r3, #1]
TxData[2]=3;
 80032d0:	4b14      	ldr	r3, [pc, #80]	; (8003324 <main+0xfc>)
 80032d2:	2203      	movs	r2, #3
 80032d4:	709a      	strb	r2, [r3, #2]
TxData[3]=4;
 80032d6:	4b13      	ldr	r3, [pc, #76]	; (8003324 <main+0xfc>)
 80032d8:	2204      	movs	r2, #4
 80032da:	70da      	strb	r2, [r3, #3]
TxData[4]=5;
 80032dc:	4b11      	ldr	r3, [pc, #68]	; (8003324 <main+0xfc>)
 80032de:	2205      	movs	r2, #5
 80032e0:	711a      	strb	r2, [r3, #4]
TxData[5]=6;
 80032e2:	4b10      	ldr	r3, [pc, #64]	; (8003324 <main+0xfc>)
 80032e4:	2206      	movs	r2, #6
 80032e6:	715a      	strb	r2, [r3, #5]
TxData[6]=7;
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <main+0xfc>)
 80032ea:	2207      	movs	r2, #7
 80032ec:	719a      	strb	r2, [r3, #6]
TxData[7]=8;
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <main+0xfc>)
 80032f0:	2208      	movs	r2, #8
 80032f2:	71da      	strb	r2, [r3, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailBox);
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <main+0x100>)
 80032f6:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <main+0xfc>)
 80032f8:	4909      	ldr	r1, [pc, #36]	; (8003320 <main+0xf8>)
 80032fa:	4808      	ldr	r0, [pc, #32]	; (800331c <main+0xf4>)
 80032fc:	f7fd f9fb 	bl	80006f6 <HAL_CAN_AddTxMessage>
HAL_Delay(500);
 8003300:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003304:	f7fc ffcc 	bl	80002a0 <HAL_Delay>
TxData[7]=TxData[7]+1;
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <main+0xfc>)
 800330a:	79db      	ldrb	r3, [r3, #7]
 800330c:	3301      	adds	r3, #1
 800330e:	b2da      	uxtb	r2, r3
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <main+0xfc>)
 8003312:	71da      	strb	r2, [r3, #7]
HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailBox);
 8003314:	e7ee      	b.n	80032f4 <main+0xcc>
 8003316:	bf00      	nop
 8003318:	2000002c 	.word	0x2000002c
 800331c:	20000058 	.word	0x20000058
 8003320:	20000100 	.word	0x20000100
 8003324:	20000080 	.word	0x20000080
 8003328:	20000054 	.word	0x20000054

0800332c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b0a6      	sub	sp, #152	; 0x98
 8003330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003332:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003336:	2228      	movs	r2, #40	; 0x28
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fae4 	bl	8003908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003340:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	2258      	movs	r2, #88	; 0x58
 8003354:	2100      	movs	r1, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fad6 	bl	8003908 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800335c:	2302      	movs	r3, #2
 800335e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003360:	2301      	movs	r3, #1
 8003362:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003364:	2310      	movs	r3, #16
 8003366:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800336a:	2302      	movs	r3, #2
 800336c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003370:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003374:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003378:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800337c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003380:	2300      	movs	r3, #0
 8003382:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003386:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe f886 	bl	800149c <HAL_RCC_OscConfig>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003396:	f000 f91b 	bl	80035d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800339a:	230f      	movs	r3, #15
 800339c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800339e:	2302      	movs	r3, #2
 80033a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033a2:	2300      	movs	r3, #0
 80033a4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033ac:	2300      	movs	r3, #0
 80033ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80033b4:	2102      	movs	r1, #2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fe ff5e 	bl	8002278 <HAL_RCC_ClockConfig>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80033c2:	f000 f905 	bl	80035d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033c6:	2302      	movs	r3, #2
 80033c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033ca:	2300      	movs	r3, #0
 80033cc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff f987 	bl	80026e4 <HAL_RCCEx_PeriphCLKConfig>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80033dc:	f000 f8f8 	bl	80035d0 <Error_Handler>
  }
}
 80033e0:	bf00      	nop
 80033e2:	3798      	adds	r7, #152	; 0x98
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80033ec:	4b17      	ldr	r3, [pc, #92]	; (800344c <MX_CAN_Init+0x64>)
 80033ee:	4a18      	ldr	r2, [pc, #96]	; (8003450 <MX_CAN_Init+0x68>)
 80033f0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80033f2:	4b16      	ldr	r3, [pc, #88]	; (800344c <MX_CAN_Init+0x64>)
 80033f4:	2210      	movs	r2, #16
 80033f6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80033f8:	4b14      	ldr	r3, [pc, #80]	; (800344c <MX_CAN_Init+0x64>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80033fe:	4b13      	ldr	r3, [pc, #76]	; (800344c <MX_CAN_Init+0x64>)
 8003400:	2200      	movs	r2, #0
 8003402:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003404:	4b11      	ldr	r3, [pc, #68]	; (800344c <MX_CAN_Init+0x64>)
 8003406:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800340a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800340c:	4b0f      	ldr	r3, [pc, #60]	; (800344c <MX_CAN_Init+0x64>)
 800340e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003412:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003414:	4b0d      	ldr	r3, [pc, #52]	; (800344c <MX_CAN_Init+0x64>)
 8003416:	2200      	movs	r2, #0
 8003418:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800341a:	4b0c      	ldr	r3, [pc, #48]	; (800344c <MX_CAN_Init+0x64>)
 800341c:	2200      	movs	r2, #0
 800341e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <MX_CAN_Init+0x64>)
 8003422:	2200      	movs	r2, #0
 8003424:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <MX_CAN_Init+0x64>)
 8003428:	2200      	movs	r2, #0
 800342a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800342c:	4b07      	ldr	r3, [pc, #28]	; (800344c <MX_CAN_Init+0x64>)
 800342e:	2200      	movs	r2, #0
 8003430:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <MX_CAN_Init+0x64>)
 8003434:	2200      	movs	r2, #0
 8003436:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003438:	4804      	ldr	r0, [pc, #16]	; (800344c <MX_CAN_Init+0x64>)
 800343a:	f7fc ff53 	bl	80002e4 <HAL_CAN_Init>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8003444:	f000 f8c4 	bl	80035d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000058 	.word	0x20000058
 8003450:	40006400 	.word	0x40006400

08003454 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003458:	4b14      	ldr	r3, [pc, #80]	; (80034ac <MX_USART2_UART_Init+0x58>)
 800345a:	4a15      	ldr	r2, [pc, #84]	; (80034b0 <MX_USART2_UART_Init+0x5c>)
 800345c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <MX_USART2_UART_Init+0x58>)
 8003460:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003464:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003466:	4b11      	ldr	r3, [pc, #68]	; (80034ac <MX_USART2_UART_Init+0x58>)
 8003468:	2200      	movs	r2, #0
 800346a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <MX_USART2_UART_Init+0x58>)
 800346e:	2200      	movs	r2, #0
 8003470:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <MX_USART2_UART_Init+0x58>)
 8003474:	2200      	movs	r2, #0
 8003476:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <MX_USART2_UART_Init+0x58>)
 800347a:	220c      	movs	r2, #12
 800347c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800347e:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <MX_USART2_UART_Init+0x58>)
 8003480:	2200      	movs	r2, #0
 8003482:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003484:	4b09      	ldr	r3, [pc, #36]	; (80034ac <MX_USART2_UART_Init+0x58>)
 8003486:	2200      	movs	r2, #0
 8003488:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800348a:	4b08      	ldr	r3, [pc, #32]	; (80034ac <MX_USART2_UART_Init+0x58>)
 800348c:	2200      	movs	r2, #0
 800348e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <MX_USART2_UART_Init+0x58>)
 8003492:	2200      	movs	r2, #0
 8003494:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003496:	4805      	ldr	r0, [pc, #20]	; (80034ac <MX_USART2_UART_Init+0x58>)
 8003498:	f7ff fb40 	bl	8002b1c <HAL_UART_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80034a2:	f000 f895 	bl	80035d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000090 	.word	0x20000090
 80034b0:	40004400 	.word	0x40004400

080034b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	; 0x28
 80034b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ba:	f107 0314 	add.w	r3, r7, #20
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	605a      	str	r2, [r3, #4]
 80034c4:	609a      	str	r2, [r3, #8]
 80034c6:	60da      	str	r2, [r3, #12]
 80034c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ca:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <MX_GPIO_Init+0xc4>)
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	4a2a      	ldr	r2, [pc, #168]	; (8003578 <MX_GPIO_Init+0xc4>)
 80034d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034d4:	6153      	str	r3, [r2, #20]
 80034d6:	4b28      	ldr	r3, [pc, #160]	; (8003578 <MX_GPIO_Init+0xc4>)
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034e2:	4b25      	ldr	r3, [pc, #148]	; (8003578 <MX_GPIO_Init+0xc4>)
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	4a24      	ldr	r2, [pc, #144]	; (8003578 <MX_GPIO_Init+0xc4>)
 80034e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034ec:	6153      	str	r3, [r2, #20]
 80034ee:	4b22      	ldr	r3, [pc, #136]	; (8003578 <MX_GPIO_Init+0xc4>)
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fa:	4b1f      	ldr	r3, [pc, #124]	; (8003578 <MX_GPIO_Init+0xc4>)
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	4a1e      	ldr	r2, [pc, #120]	; (8003578 <MX_GPIO_Init+0xc4>)
 8003500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003504:	6153      	str	r3, [r2, #20]
 8003506:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <MX_GPIO_Init+0xc4>)
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003512:	4b19      	ldr	r3, [pc, #100]	; (8003578 <MX_GPIO_Init+0xc4>)
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	4a18      	ldr	r2, [pc, #96]	; (8003578 <MX_GPIO_Init+0xc4>)
 8003518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800351c:	6153      	str	r3, [r2, #20]
 800351e:	4b16      	ldr	r3, [pc, #88]	; (8003578 <MX_GPIO_Init+0xc4>)
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800352a:	2200      	movs	r2, #0
 800352c:	2120      	movs	r1, #32
 800352e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003532:	f7fd ff89 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800353a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800353c:	4b0f      	ldr	r3, [pc, #60]	; (800357c <MX_GPIO_Init+0xc8>)
 800353e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	2300      	movs	r3, #0
 8003542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003544:	f107 0314 	add.w	r3, r7, #20
 8003548:	4619      	mov	r1, r3
 800354a:	480d      	ldr	r0, [pc, #52]	; (8003580 <MX_GPIO_Init+0xcc>)
 800354c:	f7fd fdee 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003550:	2320      	movs	r3, #32
 8003552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003554:	2301      	movs	r3, #1
 8003556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355c:	2300      	movs	r3, #0
 800355e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003560:	f107 0314 	add.w	r3, r7, #20
 8003564:	4619      	mov	r1, r3
 8003566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800356a:	f7fd fddf 	bl	800112c <HAL_GPIO_Init>

}
 800356e:	bf00      	nop
 8003570:	3728      	adds	r7, #40	; 0x28
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	10210000 	.word	0x10210000
 8003580:	48000800 	.word	0x48000800

08003584 <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 800358c:	2104      	movs	r1, #4
 800358e:	4803      	ldr	r0, [pc, #12]	; (800359c <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 8003590:	f7fd ff72 	bl	8001478 <HAL_GPIO_TogglePin>
}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	48000400 	.word	0x48000400

080035a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan,CAN_RX_FIFO0,&RxHeader,RxData);
 80035a8:	1d38      	adds	r0, r7, #4
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80035ac:	4a06      	ldr	r2, [pc, #24]	; (80035c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80035ae:	2100      	movs	r1, #0
 80035b0:	f7fd f97c 	bl	80008ac <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 80035b4:	2104      	movs	r1, #4
 80035b6:	4805      	ldr	r0, [pc, #20]	; (80035cc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80035b8:	f7fd ff5e 	bl	8001478 <HAL_GPIO_TogglePin>
}
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000088 	.word	0x20000088
 80035c8:	20000118 	.word	0x20000118
 80035cc:	48000400 	.word	0x48000400

080035d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80035d4:	bf00      	nop
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <HAL_MspInit+0x44>)
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	4a0e      	ldr	r2, [pc, #56]	; (8003624 <HAL_MspInit+0x44>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	6193      	str	r3, [r2, #24]
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <HAL_MspInit+0x44>)
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_MspInit+0x44>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	4a08      	ldr	r2, [pc, #32]	; (8003624 <HAL_MspInit+0x44>)
 8003604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003608:	61d3      	str	r3, [r2, #28]
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_MspInit+0x44>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003616:	2007      	movs	r0, #7
 8003618:	f7fd fd46 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000

08003628 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <HAL_CAN_MspInit+0x9c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d138      	bne.n	80036bc <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800364a:	4b1f      	ldr	r3, [pc, #124]	; (80036c8 <HAL_CAN_MspInit+0xa0>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <HAL_CAN_MspInit+0xa0>)
 8003650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003654:	61d3      	str	r3, [r2, #28]
 8003656:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <HAL_CAN_MspInit+0xa0>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_CAN_MspInit+0xa0>)
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	4a18      	ldr	r2, [pc, #96]	; (80036c8 <HAL_CAN_MspInit+0xa0>)
 8003668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800366c:	6153      	str	r3, [r2, #20]
 800366e:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <HAL_CAN_MspInit+0xa0>)
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800367a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800367e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003680:	2302      	movs	r3, #2
 8003682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003688:	2303      	movs	r3, #3
 800368a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800368c:	2309      	movs	r3, #9
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003690:	f107 0314 	add.w	r3, r7, #20
 8003694:	4619      	mov	r1, r3
 8003696:	480d      	ldr	r0, [pc, #52]	; (80036cc <HAL_CAN_MspInit+0xa4>)
 8003698:	f7fd fd48 	bl	800112c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 800369c:	2200      	movs	r2, #0
 800369e:	2100      	movs	r1, #0
 80036a0:	2013      	movs	r0, #19
 80036a2:	f7fd fd0c 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 80036a6:	2013      	movs	r0, #19
 80036a8:	f7fd fd25 	bl	80010f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80036ac:	2200      	movs	r2, #0
 80036ae:	2100      	movs	r1, #0
 80036b0:	2014      	movs	r0, #20
 80036b2:	f7fd fd04 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80036b6:	2014      	movs	r0, #20
 80036b8:	f7fd fd1d 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80036bc:	bf00      	nop
 80036be:	3728      	adds	r7, #40	; 0x28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40006400 	.word	0x40006400
 80036c8:	40021000 	.word	0x40021000
 80036cc:	48000400 	.word	0x48000400

080036d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	; 0x28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a17      	ldr	r2, [pc, #92]	; (800374c <HAL_UART_MspInit+0x7c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d128      	bne.n	8003744 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036f2:	4b17      	ldr	r3, [pc, #92]	; (8003750 <HAL_UART_MspInit+0x80>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	4a16      	ldr	r2, [pc, #88]	; (8003750 <HAL_UART_MspInit+0x80>)
 80036f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036fc:	61d3      	str	r3, [r2, #28]
 80036fe:	4b14      	ldr	r3, [pc, #80]	; (8003750 <HAL_UART_MspInit+0x80>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370a:	4b11      	ldr	r3, [pc, #68]	; (8003750 <HAL_UART_MspInit+0x80>)
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	4a10      	ldr	r2, [pc, #64]	; (8003750 <HAL_UART_MspInit+0x80>)
 8003710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003714:	6153      	str	r3, [r2, #20]
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <HAL_UART_MspInit+0x80>)
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003722:	230c      	movs	r3, #12
 8003724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003726:	2302      	movs	r3, #2
 8003728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372e:	2300      	movs	r3, #0
 8003730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003732:	2307      	movs	r3, #7
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003736:	f107 0314 	add.w	r3, r7, #20
 800373a:	4619      	mov	r1, r3
 800373c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003740:	f7fd fcf4 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003744:	bf00      	nop
 8003746:	3728      	adds	r7, #40	; 0x28
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40004400 	.word	0x40004400
 8003750:	40021000 	.word	0x40021000

08003754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003766:	e7fe      	b.n	8003766 <HardFault_Handler+0x4>

08003768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800376c:	e7fe      	b.n	800376c <MemManage_Handler+0x4>

0800376e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800376e:	b480      	push	{r7}
 8003770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003772:	e7fe      	b.n	8003772 <BusFault_Handler+0x4>

08003774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003778:	e7fe      	b.n	8003778 <UsageFault_Handler+0x4>

0800377a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800377a:	b480      	push	{r7}
 800377c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800377e:	bf00      	nop
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800378c:	bf00      	nop
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003796:	b480      	push	{r7}
 8003798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800379a:	bf00      	nop
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037a8:	f7fc fd5a 	bl	8000260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037ac:	bf00      	nop
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80037b4:	4802      	ldr	r0, [pc, #8]	; (80037c0 <USB_HP_CAN_TX_IRQHandler+0x10>)
 80037b6:	f7fd f98c 	bl	8000ad2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000058 	.word	0x20000058

080037c4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80037c8:	4802      	ldr	r0, [pc, #8]	; (80037d4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80037ca:	f7fd f982 	bl	8000ad2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000058 	.word	0x20000058

080037d8 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037dc:	4b1f      	ldr	r3, [pc, #124]	; (800385c <SystemInit+0x84>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	4a1e      	ldr	r2, [pc, #120]	; (800385c <SystemInit+0x84>)
 80037e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80037ec:	4b1c      	ldr	r3, [pc, #112]	; (8003860 <SystemInit+0x88>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <SystemInit+0x88>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <SystemInit+0x88>)
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	4918      	ldr	r1, [pc, #96]	; (8003860 <SystemInit+0x88>)
 80037fe:	4b19      	ldr	r3, [pc, #100]	; (8003864 <SystemInit+0x8c>)
 8003800:	4013      	ands	r3, r2
 8003802:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003804:	4b16      	ldr	r3, [pc, #88]	; (8003860 <SystemInit+0x88>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a15      	ldr	r2, [pc, #84]	; (8003860 <SystemInit+0x88>)
 800380a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800380e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003812:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <SystemInit+0x88>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a11      	ldr	r2, [pc, #68]	; (8003860 <SystemInit+0x88>)
 800381a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800381e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <SystemInit+0x88>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4a0e      	ldr	r2, [pc, #56]	; (8003860 <SystemInit+0x88>)
 8003826:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800382a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <SystemInit+0x88>)
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	4a0b      	ldr	r2, [pc, #44]	; (8003860 <SystemInit+0x88>)
 8003832:	f023 030f 	bic.w	r3, r3, #15
 8003836:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <SystemInit+0x88>)
 800383a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800383c:	4908      	ldr	r1, [pc, #32]	; (8003860 <SystemInit+0x88>)
 800383e:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <SystemInit+0x90>)
 8003840:	4013      	ands	r3, r2
 8003842:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <SystemInit+0x88>)
 8003846:	2200      	movs	r2, #0
 8003848:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800384a:	4b04      	ldr	r3, [pc, #16]	; (800385c <SystemInit+0x84>)
 800384c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003850:	609a      	str	r2, [r3, #8]
#endif
}
 8003852:	bf00      	nop
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000ed00 	.word	0xe000ed00
 8003860:	40021000 	.word	0x40021000
 8003864:	f87fc00c 	.word	0xf87fc00c
 8003868:	ff00fccc 	.word	0xff00fccc

0800386c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800386c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003870:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003872:	e003      	b.n	800387c <LoopCopyDataInit>

08003874 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003876:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003878:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800387a:	3104      	adds	r1, #4

0800387c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800387c:	480b      	ldr	r0, [pc, #44]	; (80038ac <LoopForever+0xa>)
	ldr	r3, =_edata
 800387e:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003880:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003882:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003884:	d3f6      	bcc.n	8003874 <CopyDataInit>
	ldr	r2, =_sbss
 8003886:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003888:	e002      	b.n	8003890 <LoopFillZerobss>

0800388a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800388a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800388c:	f842 3b04 	str.w	r3, [r2], #4

08003890 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003890:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <LoopForever+0x16>)
	cmp	r2, r3
 8003892:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003894:	d3f9      	bcc.n	800388a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003896:	f7ff ff9f 	bl	80037d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800389a:	f000 f811 	bl	80038c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800389e:	f7ff fcc3 	bl	8003228 <main>

080038a2 <LoopForever>:

LoopForever:
    b LoopForever
 80038a2:	e7fe      	b.n	80038a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80038a4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80038a8:	08003970 	.word	0x08003970
	ldr	r0, =_sdata
 80038ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80038b0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80038b4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80038b8:	20000134 	.word	0x20000134

080038bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038bc:	e7fe      	b.n	80038bc <ADC1_2_IRQHandler>
	...

080038c0 <__libc_init_array>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	4e0d      	ldr	r6, [pc, #52]	; (80038f8 <__libc_init_array+0x38>)
 80038c4:	4c0d      	ldr	r4, [pc, #52]	; (80038fc <__libc_init_array+0x3c>)
 80038c6:	1ba4      	subs	r4, r4, r6
 80038c8:	10a4      	asrs	r4, r4, #2
 80038ca:	2500      	movs	r5, #0
 80038cc:	42a5      	cmp	r5, r4
 80038ce:	d109      	bne.n	80038e4 <__libc_init_array+0x24>
 80038d0:	4e0b      	ldr	r6, [pc, #44]	; (8003900 <__libc_init_array+0x40>)
 80038d2:	4c0c      	ldr	r4, [pc, #48]	; (8003904 <__libc_init_array+0x44>)
 80038d4:	f000 f820 	bl	8003918 <_init>
 80038d8:	1ba4      	subs	r4, r4, r6
 80038da:	10a4      	asrs	r4, r4, #2
 80038dc:	2500      	movs	r5, #0
 80038de:	42a5      	cmp	r5, r4
 80038e0:	d105      	bne.n	80038ee <__libc_init_array+0x2e>
 80038e2:	bd70      	pop	{r4, r5, r6, pc}
 80038e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038e8:	4798      	blx	r3
 80038ea:	3501      	adds	r5, #1
 80038ec:	e7ee      	b.n	80038cc <__libc_init_array+0xc>
 80038ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038f2:	4798      	blx	r3
 80038f4:	3501      	adds	r5, #1
 80038f6:	e7f2      	b.n	80038de <__libc_init_array+0x1e>
 80038f8:	08003968 	.word	0x08003968
 80038fc:	08003968 	.word	0x08003968
 8003900:	08003968 	.word	0x08003968
 8003904:	0800396c 	.word	0x0800396c

08003908 <memset>:
 8003908:	4402      	add	r2, r0
 800390a:	4603      	mov	r3, r0
 800390c:	4293      	cmp	r3, r2
 800390e:	d100      	bne.n	8003912 <memset+0xa>
 8003910:	4770      	bx	lr
 8003912:	f803 1b01 	strb.w	r1, [r3], #1
 8003916:	e7f9      	b.n	800390c <memset+0x4>

08003918 <_init>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr

08003924 <_fini>:
 8003924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003926:	bf00      	nop
 8003928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392a:	bc08      	pop	{r3}
 800392c:	469e      	mov	lr, r3
 800392e:	4770      	bx	lr
